{
     "operator": "m1",
     "algorithm_description": "An improved bidirectional RRT* algorithm with goal bias, adaptive rewiring radius, and post-processing shortcut smoothing to enhance planning time, path length, and smoothness. It grows two trees from start and goal using goal-biased sampling and adaptive neighbor radius for rewiring, continually optimizing path cost. After the first solution, it performs a shortcut smoothing to remove unnecessary waypoints, yielding shorter and smoother paths. Early stopping applies when the two trees connect.",
     "planning_mechanism": "A bidirectional RRT* planner grows start and goal trees toward randomly sampled points biased toward the goal, with an adaptive neighbor radius shrinking as the tree grows for efficient rewiring and collision checks. Upon connecting the trees, it performs post-planning shortcut smoothing to improve path smoothness and shorten path length, while enforcing node and edge collision checks and bounded planning time.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position\n        self.parent = parent\n        self.cost = cost\n        self.children = []\n        self.valid = True\n\n    def add_child(self, child):\n        self.children.append(child)\n        child.parent = self\n\n    def update_parent(self, new_parent, new_cost):\n        if self.parent:\n            try:\n                self.parent.children.remove(self)\n            except ValueError:\n                pass\n        self.parent = new_parent\n        self.cost = new_cost\n        new_parent.add_child(self)\n\n    def path_from_root(self):\n        path = []\n        node = self\n        while node is not None:\n            path.append(node.position)\n            node = node.parent\n        return path[::-1]\nclass Planner:\n    def __init__(self, max_iter=5000, step_size=5.0, goal_sample_rate=0.1):\n        self.max_iter = max_iter\n        self.step_size = step_size\n        self.goal_sample_rate = goal_sample_rate\n\n    def plan(self, map):\n        import time\n        import math\n        import random\n\n        start_time = time.monotonic()\n\n        bounds = map.size\n        start_pos = map.start\n        goal_pos = map.goal\n        obstacles = map.obstacles\n        is_3d = len(bounds) == 3\n        dim = len(bounds)\n\n        def in_bounds(p):\n            return all(0 <= p[d] <= bounds[d] for d in range(dim))\n\n        def dist(a, b):\n            # Euclidean distance\n            return math.dist(a, b)\n\n        def sample():\n            # Goal biased sampling: with some probability sample the goal\n            if random.random() < self.goal_sample_rate:\n                return goal_pos\n            # Otherwise sample uniformly inside bounds but avoid obstacles via rejection\n            for _ in range(100):\n                if is_3d:\n                    p = tuple(random.uniform(0, bounds[d]) for d in range(dim))\n                else:\n                    p = tuple(random.uniform(0, bounds[d]) for d in range(dim))\n                if not self._is_in_obstacle(p, obstacles, is_3d):\n                    return p\n            # Fallback if no free sample found in 100 tries (unlikely)\n            return goal_pos\n\n        def steer(from_pos, to_pos):\n            vec = tuple(to_pos[d] - from_pos[d] for d in range(dim))\n            norm = dist(from_pos, to_pos)\n            if norm <= self.step_size:\n                new_pos = to_pos\n            else:\n                scale = self.step_size / norm\n                new_pos = tuple(from_pos[d] + vec[d] * scale for d in range(dim))\n            if in_bounds(new_pos):\n                return new_pos\n            # Clip to bounds if numerics cause issues\n            clipped = tuple(min(max(new_pos[d], 0), bounds[d]) for d in range(dim))\n            return clipped\n\n        def line_cost(a, b):\n            return dist(a, b)\n\n        def adaptive_radius(n):\n            # Adaptive rewiring radius: \u03b3*(log(n)/n)^(1/d); \u03b3 chosen heuristically\n            gamma = 50.0  # Tuned constant, can be adjusted\n            if n < 2:\n                return self.step_size * 5.0\n            return min(gamma * (math.log(n)/n) ** (1/dim), self.step_size * 10)\n\n        start_root = Node(start_pos, parent=None, cost=0.0)\n        goal_root = Node(goal_pos, parent=None, cost=0.0)\n\n        tree_start = [start_root]\n        tree_goal = [goal_root]\n\n        nodes = [start_root, goal_root]\n        edges = []\n\n        best_cost = float('inf')\n        best_start_node = None\n        best_goal_node = None\n        success = False\n\n        for i in range(self.max_iter):\n            if time.monotonic() - start_time > 30:\n                break\n\n            # Alternate between trees: grow_start -> grow_goal -> grow_start etc\n            if i % 2 == 0:\n                tree_from, tree_to = tree_start, tree_goal\n            else:\n                tree_from, tree_to = tree_goal, tree_start\n\n            sample_point = sample()\n            nearest = min(tree_from, key=lambda n: dist(n.position, sample_point))\n            new_pos = steer(nearest.position, sample_point)\n\n            # Validate new_pos node collision and edge collision\n            if self._is_in_obstacle(new_pos, obstacles, is_3d):\n                continue\n            if self._is_edge_in_obstacle(nearest.position, new_pos, obstacles, is_3d):\n                continue\n\n            # Adaptive rewiring radius\n            r = adaptive_radius(len(nodes))\n\n            # Find neighbors in tree_from within radius r\n            neighbors = [n for n in tree_from if dist(n.position, new_pos) <= r]\n\n            # Choose best parent minimizing cost + distance via collision-free edge\n            min_cost = nearest.cost + line_cost(nearest.position, new_pos)\n            best_parent = nearest\n            for nbr in neighbors:\n                cost_through_nbr = nbr.cost + line_cost(nbr.position, new_pos)\n                if cost_through_nbr < min_cost:\n                    if not self._is_edge_in_obstacle(nbr.position, new_pos, obstacles, is_3d):\n                        min_cost = cost_through_nbr\n                        best_parent = nbr\n\n            new_node = Node(new_pos)\n            new_node.update_parent(best_parent, min_cost)\n\n            tree_from.append(new_node)\n            nodes.append(new_node)\n            edges.append((best_parent, new_node))\n\n            # Rewire neighbors if going through new_node improves cost\n            for nbr in neighbors:\n                if nbr is best_parent:\n                    continue\n                cost_through_new = new_node.cost + line_cost(new_node.position, nbr.position)\n                if cost_through_new < nbr.cost:\n                    if not self._is_edge_in_obstacle(new_node.position, nbr.position, obstacles, is_3d):\n                        try:\n                            edges.remove((nbr.parent, nbr))\n                        except Exception:\n                            pass\n                        nbr.update_parent(new_node, cost_through_new)\n                        edges.append((new_node, nbr))\n\n            # Try connecting the other tree to new_node to check if paths can be connected\n            nearest_to = min(tree_to, key=lambda n: dist(n.position, new_node.position))\n            while True:\n                connect_pos = steer(nearest_to.position, new_node.position)\n                # Check collision for edge\n                if self._is_in_obstacle(connect_pos, obstacles, is_3d):\n                    break\n                if self._is_edge_in_obstacle(nearest_to.position, connect_pos, obstacles, is_3d):\n                    break\n                # Add node to tree_to\n                new_to_node = Node(connect_pos)\n                new_to_node.update_parent(nearest_to, nearest_to.cost + line_cost(nearest_to.position, connect_pos))\n                tree_to.append(new_to_node)\n                nodes.append(new_to_node)\n                edges.append((nearest_to, new_to_node))\n\n                if dist(connect_pos, new_node.position) <= self.step_size:\n                    # Check final edge to new_node\n                    if not self._is_edge_in_obstacle(connect_pos, new_node.position, obstacles, is_3d):\n                        final_connect = Node(new_node.position)\n                        final_connect.update_parent(new_to_node, new_to_node.cost + dist(new_node.position, connect_pos))\n                        tree_to.append(final_connect)\n                        nodes.append(final_connect)\n                        edges.append((new_to_node, final_connect))\n\n                        # Found a path connecting both trees\n                        total_cost = final_connect.cost + new_node.cost\n                        if total_cost < best_cost:\n                            best_cost = total_cost\n                            success = True\n                            # We return combined path by remembering nodes connecting trees\n                            best_start_node = new_node if tree_from is tree_start else final_connect\n                            best_goal_node = final_connect if tree_to is tree_goal else new_node\n                        break\n                    else:\n                        break\n                nearest_to = new_to_node\n\n            if success:\n                break\n\n        extracted_path = []\n        if success and best_start_node and best_goal_node:\n            path_start = best_start_node.path_from_root()\n            path_goal = best_goal_node.path_from_root()\n            # path_goal is from goal_root to connection, reverse except overlap connection node\n            extracted_path = path_start + path_goal[-2::-1]\n\n            # Perform path shortcutting smoothing\n            extracted_path = self._shortcut_path(extracted_path, obstacles, is_3d, bounds)\n\n        return PlannerResult(\n            success=success,\n            path=extracted_path,\n            nodes=nodes,\n            edges=edges,\n        )\n\n    def _shortcut_path(self, path, obstacles, is_3d, bounds):\n        import math\n        def can_connect(a, b):\n            if a == b:\n                return True\n            if self._is_edge_in_obstacle(a, b, obstacles, is_3d):\n                return False\n            return True\n\n        if len(path) < 3:\n            return path\n\n        # Iteratively try to shortcut path by connecting farther points directly\n        shortened = [path[0]]\n        i = 0\n        while i < len(path) - 1:\n            j = len(path) - 1\n            while j > i + 1:\n                if can_connect(path[i], path[j]):\n                    break\n                j -= 1\n            shortened.append(path[j])\n            i = j\n        return shortened\n\n    def _is_in_obstacle(self, pos, obstacles, is_3d):\n        for obs in obstacles:\n            if is_3d:\n                x, y, z, w, h, d = obs\n                px, py, pz = pos\n                if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                    return True\n            else:\n                x, y, w, h = obs\n                px, py = pos\n                if x <= px <= x + w and y <= py <= y + h:\n                    return True\n        return False\n\n    def _is_edge_in_obstacle(self, from_pos, to_pos, obstacles, is_3d, resolution=1.0):\n        import math\n        distance = math.dist(from_pos, to_pos)\n        steps = max(1, int(distance / resolution))\n        for i in range(steps + 1):\n            interp = tuple(from_pos[d] + (to_pos[d] - from_pos[d]) * (i / steps) for d in range(len(from_pos)))\n            if self._is_in_obstacle(interp, obstacles, is_3d):\n                return True\n        return False",
     "objective": -38.54314,
     "time_improvement": 66.0,
     "length_improvement": 17.0,
     "smoothness_improvement": 1649.0,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 0.0124739408493042,
               "num_nodes_avg": 97.8,
               "path_length_avg": 161.16050378318585,
               "smoothness_avg": 0.047350045450239985,
               "success_improvement": 0.0,
               "time_improvement": 50.357614561905564,
               "length_improvement": 11.665374124831326,
               "smoothness_improvement": 641.1310335656783,
               "objective_score": 25.312164011298858
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 0.021719694137573242,
               "num_nodes_avg": 248.5,
               "path_length_avg": 233.695774193213,
               "smoothness_avg": 0.10749915802083503,
               "success_improvement": 0.0,
               "time_improvement": 86.48673705408524,
               "length_improvement": 21.985624014409588,
               "smoothness_improvement": 2666.030764389923,
               "objective_score": 52.46754934682094
          },
          {
               "map_id": 2,
               "success_rate": 1.0,
               "time_avg": 0.018388795852661132,
               "num_nodes_avg": 200.2,
               "path_length_avg": 122.948486694335,
               "smoothness_avg": 0.13675427801112314,
               "success_improvement": 0.0,
               "time_improvement": 62.15365591556138,
               "length_improvement": 18.34346931542014,
               "smoothness_improvement": 1639.504322150689,
               "objective_score": 37.84969997467394
          }
     ],
     "success_rate": 1.0
}