{
     "algorithm": "This algorithm is an improved RRT* inspired method that incorporates goal-biased sampling,\n    heuristic guided vertex selection, adaptive step length, and rewiring for continuous path cost optimization.\n    It uses a Forest graph structure rooted at start with incremental vertex insertion.\n    Key improvements:\n    - Goal-bias in sampling guides exploration towards goal.\n    - Adaptive max step size based on distance to nearest vertex and goal.\n    - Heuristic (cost + distance-to-goal) to select parents for new vertex, improving path quality.\n    - Rewiring nearby vertices around new vertex to reduce path cost (like RRT*).\n    - Shortcut smoothing applied after path found for smoother routes.\n    - Early termination if path cost no longer improves or if 30s timeout reached.\n    This balances exploration, path quality, and computational efficiency for improved planning performance.",
     "code": "class PathPlanning(SampleBasedAlgorithm):\n    \n\n    _graph: Forest\n    _max_dist_base: float\n    _iterations: int\n    _goal_sample_rate: float\n    _rewire_radius: float\n\n    def __init__(self, services: Services, testing: BasicTesting = None) -> None:\n        super().__init__(services, testing)\n\n        self._graph = gen_forest(self._services,\n                                 Vertex(self._get_grid().agent.position),\n                                 Vertex(self._get_grid().goal.position),\n                                 [])\n        self._graph.edges_removable = True\n\n        self._max_dist_base = 12.0  # base adaptive max step length\n        self._iterations = 8000\n        self._goal_sample_rate = 0.2  # probability of sampling goal to bias towards it\n        self._rewire_radius = 20.0\n\n        self._init_displays()\n\n    def _get_random_sample(self) -> Point:\n        from random import random\n        if random() < self._goal_sample_rate:\n            # With some probability sample goal directly\n            return self._graph.root_vertex_goal.position\n        else:\n            while True:\n                sample = Point(*[\n                    torch.randint(0, self._get_grid().size[i], (1,)).item()\n                    for i in range(self._get_grid().size.n_dim)\n                ])\n                if self._get_grid().is_agent_valid_pos(sample):\n                    return sample\n\n    def _get_nearest_vertex(self, vertices: List[Vertex], point: Point) -> Vertex:\n        return self._graph.get_nearest_vertex(vertices, point)\n\n    def _get_dist(self, p1: Point, p2: Point) -> float:\n        return self._get_grid().get_distance(p1, p2)\n\n    def _get_adaptive_max_dist(self, q_near: Vertex, q_rand: Point) -> float:\n        d_to_goal = self._get_dist(q_near.position, self._graph.root_vertex_goal.position)\n        d_to_rand = self._get_dist(q_near.position, q_rand)\n        max_dist = min(self._max_dist_base, max(d_to_rand * 0.75, 5.0), d_to_goal * 0.75)\n        if max_dist < 1.0:\n            max_dist = 1.0\n        return max_dist\n\n    def _get_new_vertex(self, q_near: Vertex, q_sample: Point, max_dist: float) -> Vertex:\n        dir_vec = q_sample.to_tensor() - q_near.position.to_tensor()\n        norm = torch.norm(dir_vec)\n        if norm <= max_dist:\n            return Vertex(q_sample)\n        dir_normalized = dir_vec / norm\n        new_pos = Point.from_tensor(q_near.position.to_tensor() + max_dist * dir_normalized)\n        return Vertex(new_pos)\n\n    def _line_valid(self, frm: Point, to: Point) -> bool:\n        line_seq = self._get_grid().get_line_sequence(frm, to)\n        return self._get_grid().is_valid_line_sequence(line_seq)\n\n    def _choose_parent(self, near_vertices: List[Vertex], q_new: Vertex) -> Vertex:\n        # Choose parent to minimize cost + heuristic-to-goal\n        best_parent = None\n        best_cost = float('inf')\n        for v in near_vertices:\n            if v.position == q_new.position:\n                continue\n            if self._line_valid(v.position, q_new.position):\n                cost_v = v.cost + self._get_grid().get_movement_cost(v.position, q_new.position)\n                heuristic = self._get_dist(q_new.position, self._graph.root_vertex_goal.position)\n                total_cost = cost_v + heuristic\n                if total_cost < best_cost:\n                    best_cost = total_cost\n                    best_parent = v\n        return best_parent\n\n    def _rewire(self, near_vertices: List[Vertex], q_new: Vertex) -> None:\n        # Try to rewire near vertices for lower cost paths through q_new\n        for v in near_vertices:\n            if v == q_new or v == self._graph.root_vertex_start:\n                continue\n            if self._line_valid(q_new.position, v.position):\n                cost_through_qnew = q_new.cost + self._get_grid().get_movement_cost(q_new.position, v.position)\n                if cost_through_qnew < v.cost:\n                    # Change parent edge\n                    # Remove old parent edges:\n                    for p in list(v.parents):\n                        self._graph.remove_edge(p, v)\n                    # Add new edge\n                    self._graph.add_edge(q_new, v)\n                    v.cost = cost_through_qnew\n\n    def _extract_path(self) -> None:\n        path: List[Vertex] = []\n        current = self._graph.root_vertex_goal\n\n        # Trace back to start by choosing minimum cost parent\n        while current != self._graph.root_vertex_start:\n            path.append(current)\n            # Choose parent with minimal cost\n            if not current.parents:\n                # Fail-safe if no parent (break infinite)\n                break\n            current = min(current.parents, key=lambda p: p.cost + self._get_dist(p.position, current.position))\n        path.append(self._graph.root_vertex_start)\n        path.reverse()\n\n        # Shortcut smoothing - try to remove unnecessary intermediate nodes\n        path = self._smooth_path(path)\n\n        for v in path:\n            self.move_agent(v.position)\n            self.key_frame(ignore_key_frame_skip=True)\n\n    def _smooth_path(self, path: List[Vertex]) -> List[Vertex]:\n        # Try to shortcut by skipping intermediate vertices if direct connection is collision free\n        if len(path) < 3:\n            return path\n        smoothed_path = [path[0]]\n        idx = 0\n        while idx < len(path) - 1:\n            next_idx = len(path) - 1  # try to connect as far as possible\n            while next_idx > idx + 1:\n                if self._line_valid(path[idx].position, path[next_idx].position):\n                    break\n                next_idx -= 1\n            smoothed_path.append(path[next_idx])\n            idx = next_idx\n        return smoothed_path\n\n    def _find_path_internal(self) -> None:\n        import time\n\n        start_time = time.time()\n\n        self._graph.root_vertex_start.cost = 0.0\n        self._graph.root_vertex_goal.cost = float('inf')\n\n        for i in range(self._iterations):\n            if time.time() - start_time > 30.0:\n                # timeout reached, stop planning without path\n                return\n\n            q_rand: Point = self._get_random_sample()\n            q_near: Vertex = self._get_nearest_vertex(self._graph.root_vertices, q_rand)\n\n            max_dist: float = self._get_adaptive_max_dist(q_near, q_rand)\n            q_new: Vertex = self._get_new_vertex(q_near, q_rand, max_dist)\n\n            if not self._line_valid(q_near.position, q_new.position):\n                continue\n\n            # Find near vertices within radius for rewiring and parent choosing\n            near_vertices: List[Vertex] = self._graph.get_vertices_within_radius(self._graph.root_vertices, q_new.position, self._rewire_radius)\n\n            # Choose best parent based on cost+heuristic\n            parent_vertex = self._choose_parent(near_vertices + [q_near], q_new)\n            if parent_vertex is None:\n                parent_vertex = q_near\n\n            # Set cost and add vertex and edge\n            q_new.cost = parent_vertex.cost + self._get_grid().get_movement_cost(parent_vertex.position, q_new.position)\n            self._graph.root_vertices.append(q_new)\n            self._graph.add_edge(parent_vertex, q_new)\n\n            # Rewire neighbors to improve path cost\n            self._rewire(near_vertices, q_new)\n\n            # Early check if new vertex reached goal or close enough\n            if self._get_dist(q_new.position, self._graph.root_vertex_goal.position) < self._max_dist_base:\n                if self._line_valid(q_new.position, self._graph.root_vertex_goal.position):\n                    # Connect goal directly if possible\n                    if self._graph.root_vertex_goal.cost > q_new.cost + self._get_grid().get_movement_cost(q_new.position, self._graph.root_vertex_goal.position):\n                        # Remove old parent edges of goal\n                        for p in list(self._graph.root_vertex_goal.parents):\n                            self._graph.remove_edge(p, self._graph.root_vertex_goal)\n                        self._graph.add_edge(q_new, self._graph.root_vertex_goal)\n                        self._graph.root_vertex_goal.cost = q_new.cost + self._get_grid().get_movement_cost(q_new.position, self._graph.root_vertex_goal.position)\n\n            # Terminate early if goal is connected and path cost is finite\n            if self._graph.root_vertex_goal.cost < float('inf'):\n                self._extract_path()\n                return\n\n            self.key_frame() ",
     "objective": 2635.905,
     "other_inf": null,
     "results": {
          "goal_found_perc": 97.33,
          "average_steps": 10.73,
          "average_distance": 11.53,
          "average_smoothness": 0.35,
          "average_clearance": 2.11,
          "average_time": 0.1375,
          "average_distance_from_goal": 0.2,
          "average_original_distance_from_goal": 8.42,
          "steps_alldata": [
               11,
               17,
               14,
               4,
               10,
               18,
               18,
               15,
               10,
               3,
               12,
               12,
               4,
               20,
               4,
               9,
               19,
               19,
               16,
               17,
               12,
               6,
               6,
               13,
               8,
               18,
               13,
               15,
               6,
               9,
               20,
               8,
               4,
               13,
               7,
               20,
               13,
               7,
               13,
               12,
               16,
               10,
               10,
               12,
               6,
               25,
               12,
               11,
               8,
               7,
               19,
               13,
               5,
               9,
               6,
               5,
               11,
               15,
               4,
               14,
               10,
               11,
               7,
               6,
               7,
               15,
               4,
               10,
               3,
               10,
               12,
               10,
               5,
               10,
               23,
               15,
               5,
               14,
               15,
               13,
               11,
               15,
               2,
               12,
               9,
               14,
               10,
               10,
               18,
               16,
               10,
               12,
               10,
               19,
               2,
               4,
               7,
               28,
               11,
               15,
               3,
               11,
               5,
               10,
               11,
               13,
               15,
               7,
               5,
               14,
               7,
               22,
               5,
               11,
               6,
               10,
               9,
               3,
               3,
               10,
               9,
               9,
               10,
               18,
               6,
               15,
               10,
               4,
               9,
               10,
               3,
               14,
               10,
               2,
               16,
               3,
               6,
               2,
               16,
               9,
               6,
               19,
               17,
               23,
               4,
               3
          ],
          "distance_alldata": [
               11.242640614509583,
               18.899494767189026,
               17.55634891986847,
               3.414213538169861,
               11.899494767189026,
               20.727921843528748,
               19.485281229019165,
               17.727921843528748,
               12.313708305358887,
               2.8284270763397217,
               11.828427076339722,
               13.071067690849304,
               3.8284270763397217,
               23.97056245803833,
               4.2426406145095825,
               10.485281229019165,
               20.899494767189026,
               22.14213538169861,
               16.242640614509583,
               18.899494767189026,
               13.899494767189026,
               7.071067690849304,
               5.828427076339722,
               13.242640614509583,
               7.828427076339722,
               19.485281229019165,
               13.656854152679443,
               17.313708305358887,
               6.2426406145095825,
               9.656854152679443,
               22.727921843528748,
               8.656854152679443,
               3.0,
               15.313708305358887,
               7.2426406145095825,
               21.071067690849304,
               13.656854152679443,
               7.2426406145095825,
               13.242640614509583,
               14.313708305358887,
               19.14213538169861,
               10.656854152679443,
               9.828427076339722,
               12.656854152679443,
               5.828427076339722,
               25.242640614509583,
               12.242640614509583,
               12.071067690849304,
               8.656854152679443,
               6.828427076339722,
               20.071067690849304,
               14.899494767189026,
               4.0,
               10.899494767189026,
               5.414213538169861,
               5.2426406145095825,
               11.242640614509583,
               16.071067690849304,
               3.414213538169861,
               13.828427076339722,
               11.485281229019165,
               12.899494767189026,
               6.0,
               6.656854152679443,
               6.414213538169861,
               15.242640614509583,
               4.2426406145095825,
               11.071067690849304,
               2.414213538169861,
               9.41421353816986,
               13.485281229019165,
               11.071067690849304,
               5.2426406145095825,
               10.242640614509583,
               24.899494767189026,
               16.899494767189026,
               5.2426406145095825,
               14.656854152679443,
               17.313708305358887,
               12.41421353816986,
               10.41421353816986,
               17.727921843528748,
               1.4142135381698608,
               13.071067690849304,
               9.242640614509583,
               14.656854152679443,
               11.899494767189026,
               11.071067690849304,
               19.071067690849304,
               16.656854152679443,
               11.071067690849304,
               11.0,
               9.41421353816986,
               22.97056245803833,
               1.4142135381698608,
               3.8284270763397217,
               7.2426406145095825,
               28.656854152679443,
               13.313708305358887,
               18.97056245803833,
               2.0,
               12.899494767189026,
               5.2426406145095825,
               9.828427076339722,
               10.41421353816986,
               14.485281229019165,
               16.899494767189026,
               7.656854152679443,
               4.414213538169861,
               14.656854152679443,
               8.485281229019165,
               23.485281229019165,
               5.2426406145095825,
               12.899494767189026,
               7.071067690849304,
               12.313708305358887,
               10.071067690849304,
               2.414213538169861,
               2.8284270763397217,
               10.242640614509583,
               10.899494767189026,
               8.828427076339722,
               11.899494767189026,
               20.313708305358887,
               5.0,
               17.727921843528748,
               10.242640614509583,
               3.414213538169861,
               9.656854152679443,
               9.828427076339722,
               2.8284270763397217,
               14.656854152679443,
               11.071067690849304,
               1.0,
               17.485281229019165,
               2.414213538169861,
               5.414213538169861,
               1.0,
               15.41421353816986,
               9.656854152679443,
               7.071067690849304,
               22.55634891986847,
               19.727921843528748,
               24.071067690849304,
               4.2426406145095825,
               2.0
          ],
          "smoothness_alldata": [
               0.5711986611773677,
               0.6929983764481712,
               0.28049934529296516,
               0.3926990902558596,
               0.39269908341015125,
               0.5235987794014701,
               0.4363323129985824,
               0.31415926307707653,
               0.07853981462831774,
               0.0,
               0.3926990874034811,
               0.4581489215175653,
               0.3926990731415887,
               0.5497787212239222,
               0.0,
               0.26179938209439246,
               0.5373776844403647,
               0.49604094890665595,
               0.39269907528087256,
               0.5543987035746694,
               0.4581489215175653,
               0.0,
               0.5235987641887849,
               0.18124573133127814,
               0.3926990731415887,
               0.6981317046009033,
               0.362491454763662,
               0.4712389037432259,
               0.6544984609407382,
               0.6108652515091149,
               0.1963495434165027,
               0.6872233779977802,
               0.0,
               0.4833219414401925,
               0.33659920554993317,
               0.5105088019297737,
               0.4229067020513744,
               0.5609986856961386,
               0.3624914521306973,
               0.327249236175126,
               0.44178647653784203,
               0.5497787126667867,
               0.39269908341015125,
               0.5235987641887849,
               0.5235987641887849,
               0.3769911170616335,
               0.3926990731415887,
               0.3569991729598723,
               0.49087384142698587,
               0.44879896029241095,
               0.3306939599327633,
               0.5437371887279049,
               0.0,
               0.3490658427925233,
               0.13089969104719623,
               0.314159258513271,
               0.3569991729598723,
               0.7330382881195213,
               0.3926990731415887,
               0.4487989505128276,
               0.4712389083070315,
               0.42839900755184684,
               0.0,
               0.26179938209439246,
               0.22439948014620548,
               0.47123890146132313,
               0.0,
               0.628318517026542,
               0.2617993935039064,
               0.3141592687818335,
               0.4581489186651868,
               0.5497787263582035,
               0.314159258513271,
               0.4712389083070315,
               0.3756252063490921,
               0.47123890146132313,
               0.314159258513271,
               0.16829960277496658,
               0.5235987755982988,
               0.24166097598602576,
               0.1427996629605777,
               0.6806784048549344,
               0.0,
               0.4581489386318362,
               0.6981316969945605,
               0.16829960277496658,
               0.3141592653589793,
               0.2356194438849532,
               0.5235987774998845,
               0.4908738564019729,
               0.5497787229353492,
               0.0,
               0.15707963610234382,
               0.5787144271800826,
               0.0,
               0.3926990731415887,
               0.33659921532951653,
               0.2804993489603089,
               0.3569991667365011,
               0.3141592676408821,
               0.0,
               0.28559933214452665,
               0.31415927220468765,
               0.314159258513271,
               0.2141994975525522,
               0.4229067073173039,
               0.26179939122200363,
               0.4487989407332442,
               0.31415927220468765,
               0.5609986783614511,
               0.2243994703666221,
               0.2855993352562123,
               0.31415927220468765,
               0.42839900755184684,
               0.0,
               0.1570796292566355,
               0.6981317084040745,
               0.26179938209439246,
               0.0,
               0.6283185204493961,
               0.17453292900260425,
               0.5235987832046415,
               0.314159258513271,
               0.6544984761534235,
               0.0,
               0.628318517026542,
               0.4712388877699064,
               0.3926990731415887,
               0.7853981576926913,
               0.314159258513271,
               0.0,
               0.39269907558648454,
               0.23561945415351576,
               0.0,
               0.49087384356626973,
               0.2617993935039064,
               0.26179938209439246,
               0.0,
               0.09817476828539717,
               0.6108652515091149,
               0.0,
               0.2893572153915434,
               0.46199892568588874,
               0.4780684487736008,
               0.0,
               0.0
          ],
          "clearance_alldata": [
               3.1347823252501117,
               1.1319200404187817,
               1.4377850146065685,
               7.5,
               1.2242640687119286,
               1.3992729220621358,
               3.33573003487159,
               1.5852847829576562,
               1.4650281539872885,
               6.0,
               1.3101124459781968,
               1.3880711874576985,
               2.1625703849682214,
               1.2207106781186547,
               1.8941228056353687,
               1.4444444444444444,
               1.6225487960392733,
               1.4928977990521974,
               1.8266732976508975,
               2.0066542517521784,
               1.4767791126448637,
               2.235702260395516,
               1.0690355937288492,
               1.1593129086050367,
               2.095978616954046,
               1.419432026471364,
               1.362675126316836,
               2.257425606053391,
               1.235702260395516,
               2.101409673869917,
               1.6357388321059432,
               1.4348385830773844,
               1.8090169943749475,
               1.4846586984419825,
               1.807183077124698,
               2.0707106781186546,
               1.9780597417014514,
               1.4040610178208843,
               5.580320215973272,
               1.2845177968644246,
               2.1920151387207314,
               2.6414213562373097,
               1.1656854249492379,
               1.4368867239266072,
               6.270562119350991,
               1.4617281506746018,
               1.5107491837076632,
               5.695211758697052,
               1.2285533905932737,
               4.037328167680166,
               1.3409846665588987,
               1.991557417731141,
               5.543652090601087,
               1.1571348402636774,
               1.0690355937288492,
               3.7438723371992437,
               1.3753627458629056,
               1.580985109474591,
               2.5,
               1.450509699240376,
               2.1186912597118446,
               4.20863234630617,
               1.4132746038560242,
               1.0690355937288492,
               5.3173174227521125,
               1.974726066488575,
               1.1035533905932737,
               3.8226772762414356,
               1.0,
               1.7128990204491963,
               3.339877940759473,
               1.2656854249492382,
               1.448528137423857,
               1.8886349517372676,
               1.548160820396132,
               1.6124608398078963,
               7.092501174215641,
               1.3790811278118047,
               1.3143184428079242,
               2.918128063512225,
               1.1129673351926623,
               1.082842712474619,
               2.5,
               1.6380711874576985,
               1.8791874516476947,
               3.504158716580708,
               1.2414213562373095,
               1.2064495102245982,
               3.955776096424465,
               1.364276695296637,
               1.4064495102245982,
               1.4125703849682214,
               1.2242640687119286,
               1.1921200810459414,
               5.5,
               1.0,
               1.2357545056961265,
               2.1377485348153007,
               1.5727784617950702,
               1.3143184428079244,
               5.393952027490282,
               1.4980644240562797,
               1.3300563079745769,
               2.449847350245616,
               1.5039276151695504,
               1.5483838618839971,
               3.6501240323145256,
               1.4040610178208843,
               1.894427190999916,
               2.3740887417975722,
               1.3448876517675852,
               1.3834602724480558,
               3.0,
               1.4610061647150432,
               6.546465554663977,
               1.2414213562373095,
               1.1111111111111112,
               4.2235160309735145,
               1.0,
               1.530056307974577,
               5.350331382786994,
               1.4253807916384658,
               1.789292222699217,
               1.9805711966596047,
               1.2071067811865475,
               1.192861481799478,
               3.5,
               2.5995864094170424,
               1.1840949166102646,
               2.5010469622751654,
               1.0,
               1.2953973510079613,
               1.7414213562373095,
               1.4142135623730951,
               1.2691959868353293,
               0,
               1.5107491837076632,
               1.0,
               3.2977142362982557,
               1.4516105669162203,
               2.235702260395516,
               1.3845860941771193,
               1.229382055094804,
               2.0158720948692066,
               1.6035533905932737,
               1.1380711874576983
          ],
          "time_alldata": [
               0.006631,
               0.629903,
               0.005001,
               0.003034,
               0.016808,
               0.332083,
               0.010503,
               0.12319,
               0.010507,
               0.0025,
               0.06878,
               0.007139,
               0.002108,
               3.128466,
               0.001998,
               0.003152,
               0.696902,
               0.024141,
               0.006,
               0.235893,
               0.006503,
               0.00251,
               0.002998,
               0.042924,
               0.003006,
               0.010785,
               0.00508,
               0.04671,
               0.002394,
               0.002075,
               0.102844,
               0.226035,
               0.000999,
               0.124715,
               0.002002,
               0.325061,
               1.115761,
               0.009721,
               0.004128,
               0.061531,
               0.003119,
               0.001721,
               0.257284,
               0.003512,
               0.003,
               0.386875,
               0.010153,
               0.002998,
               0.732267,
               0.002,
               0.840303,
               0.028524,
               0.002814,
               0.218314,
               0.009512,
               0.001508,
               0.004503,
               0.061788,
               0.001005,
               0.290534,
               0.003,
               0.0,
               0.002001,
               0.001002,
               0.002002,
               0.814831,
               0.008541,
               0.005,
               0.003504,
               0.003502,
               0.003039,
               0.008022,
               0.002001,
               0.006504,
               1.380746,
               0.044571,
               0.002004,
               0.240805,
               0.00926,
               0.003002,
               0.004998,
               0.135176,
               0.002001,
               0.003182,
               0.086297,
               0.288799,
               0.126109,
               0.11889,
               0.01602,
               0.078339,
               0.012031,
               0.002446,
               0.003,
               0.069975,
               0.002003,
               0.002,
               0.002998,
               0.469479,
               0.025818,
               0.047488,
               0.001999,
               0.01908,
               0.002551,
               0.003219,
               0.176691,
               0.004509,
               0.005998,
               0.060963,
               0.003,
               0.063926,
               0.079469,
               0.014869,
               0.001998,
               0.001999,
               0.001001,
               0.013022,
               0.006343,
               0.002,
               0.001,
               0.010514,
               0.002543,
               0.025386,
               0.003865,
               0.23238,
               0.002,
               0.208954,
               0.002617,
               0.000998,
               0.002999,
               0.003506,
               0.002507,
               0.305654,
               0.172892,
               0.002426,
               0.074396,
               0.0,
               0.001999,
               0.001881,
               0.007271,
               0.003,
               0.003179,
               0.481805,
               0.153301,
               3.591848,
               0.002002,
               0.000998
          ],
          "distance_from_goal_alldata": [
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               11.180339813232422,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               3.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               2.2360680103302,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               14.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0
          ],
          "original_distance_from_goal_alldata": [
               8.062257766723633,
               6.7082037925720215,
               8.602325439453125,
               3.1622776985168457,
               8.602325439453125,
               9.05538558959961,
               16.401220321655273,
               8.062257766723633,
               10.630146026611328,
               2.8284270763397217,
               8.062257766723633,
               10.770329475402832,
               3.605551242828369,
               8.062257766723633,
               4.242640495300293,
               10.0,
               8.062257766723633,
               14.142135620117188,
               11.045360565185547,
               11.180339813232422,
               12.806248664855957,
               5.830951690673828,
               5.385164737701416,
               9.0,
               7.280109882354736,
               13.892443656921387,
               8.0,
               10.0,
               11.180339813232422,
               4.4721360206604,
               8.246211051940918,
               11.401754379272461,
               7.280109882354736,
               3.0,
               4.4721360206604,
               6.7082037925720215,
               8.246211051940918,
               10.0,
               6.4031243324279785,
               12.369317054748535,
               12.206555366516113,
               18.027755737304688,
               7.8102498054504395,
               6.7082037925720215,
               11.704699516296387,
               5.385164737701416,
               8.062257766723633,
               11.401754379272461,
               11.180339813232422,
               3.0,
               8.062257766723633,
               6.324555397033691,
               17.0,
               13.45362377166748,
               4.0,
               8.5440034866333,
               3.1622776985168457,
               5.0,
               10.440306663513184,
               12.041594505310059,
               3.1622776985168457,
               9.848857879638672,
               10.816654205322266,
               12.206555366516113,
               6.0,
               6.4031243324279785,
               6.082762718200684,
               12.041594505310059,
               3.1622776985168457,
               10.29563045501709,
               2.2360680103302,
               8.0,
               7.8102498054504395,
               9.486832618713379,
               5.0,
               9.486832618713379,
               14.03566837310791,
               13.45362377166748,
               5.0,
               8.062257766723633,
               11.045360565185547,
               11.0,
               10.049875259399414,
               11.180339813232422,
               1.4142135381698608,
               12.083045959472656,
               7.8102498054504395,
               13.152946472167969,
               11.313708305358887,
               10.29563045501709,
               13.34166431427002,
               14.317821502685547,
               10.0,
               11.0,
               9.05538558959961,
               9.486832618713379,
               1.4142135381698608,
               3.605551242828369,
               4.123105525970459,
               16.6433162689209,
               8.246211051940918,
               12.649110794067383,
               2.0,
               12.041594505310059,
               5.0,
               9.219544410705566,
               9.219544410705566,
               11.401754379272461,
               9.219544410705566,
               4.0,
               4.123105525970459,
               12.206555366516113,
               6.0,
               4.123105525970459,
               5.0,
               2.2360680103302,
               10.049875259399414,
               7.071067810058594,
               8.062257766723633,
               7.8102498054504395,
               2.2360680103302,
               2.8284270763397217,
               7.071067810058594,
               10.630146026611328,
               5.099019527435303,
               11.401754379272461,
               12.206555366516113,
               5.0,
               14.317821502685547,
               9.486832618713379,
               3.1622776985168457,
               6.0,
               9.219544410705566,
               2.8284270763397217,
               12.206555366516113,
               10.29563045501709,
               1.0,
               15.264337539672852,
               2.2360680103302,
               5.099019527435303,
               1.0,
               15.033296585083008,
               14.0,
               8.9442720413208,
               7.071067810058594,
               11.180339813232422,
               15.524174690246582,
               11.180339813232422,
               4.242640495300293,
               2.0
          ],
          "path_deviation_alldata": [
               -2.585786461830139,
               -4.828427076339722,
               -8.485281229019165,
               0.0,
               -1.4142135381698608,
               -9.656854152679443,
               -1.1715729236602783,
               -8.485281229019165,
               -1.4142135381698608,
               0.0,
               -1.1715729236602783,
               -1.4142135381698608,
               0.0,
               -3.6568541526794434,
               0.0,
               0.0,
               -6.0,
               -7.313708305358887,
               -3.414213538169861,
               -4.828427076339722,
               -0.5857864618301392,
               -0.8284270763397217,
               0.0,
               -2.585786461830139,
               0.0,
               -4.585786461830139,
               -4.0,
               -5.071067690849304,
               -1.4142135381698608,
               -0.24264061450958252,
               -9.071067690849304,
               -0.8284270763397217,
               0.0,
               -5.656854152679443,
               0.0,
               -8.0,
               -1.1715729236602783,
               -0.5857864618301392,
               0.0,
               -1.4142135381698608,
               0.0,
               -2.585786461830139,
               -0.5857864618301392,
               0.0,
               0.0,
               -8.343145847320557,
               0.0,
               0.0,
               0.0,
               0.0,
               -1.1715729236602783,
               -0.5857864618301392,
               0.0,
               0.0,
               -2.0,
               0.0,
               0.0,
               -3.7573593854904175,
               0.0,
               -1.7573593854904175,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               -1.7573593854904175,
               -0.8284270763397217,
               0.0,
               0.0,
               -0.5857864618301392,
               -5.414213538169861,
               -0.8284270763397217,
               0.0,
               0.0,
               -5.171572923660278,
               -2.585786461830139,
               0.0,
               -6.0,
               -5.071067690849304,
               -0.5857864618301392,
               0.0,
               -5.071067690849304,
               0.0,
               0.0,
               -1.1715729236602783,
               -0.8284270763397217,
               0.0,
               0.0,
               -4.828427076339722,
               -0.5857864618301392,
               -0.5857864618301392,
               0.0,
               0.0,
               -12.727921843528748,
               0.0,
               0.0,
               -2.8284270763397217,
               -2.585786461830139,
               -4.485281229019165,
               -5.313708305358887,
               0.0,
               0.0,
               0.0,
               0.0,
               -0.5857864618301392,
               -2.2426406145095825,
               -7.071067690849304,
               -2.0,
               0.0,
               -1.1715729236602783,
               -0.8284270763397217,
               -19.071067690849304,
               0.0,
               -2.485281229019165,
               0.0,
               -2.2426406145095825,
               -2.0,
               0.0,
               0.0,
               -2.0,
               0.0,
               -0.5857864618301392,
               0.0,
               -3.6568541526794434,
               0.0,
               -2.485281229019165,
               0.0,
               0.0,
               -2.8284270763397217,
               0.0,
               0.0,
               -1.7573593854904175,
               0.0,
               0.0,
               -1.1715729236602783,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               0.0,
               -9.899494767189026,
               -3.071067690849304,
               -2.3431458473205566,
               0.0,
               0.0
          ],
          "memory_alldata": [
               625.646,
               85.383,
               15.287,
               9.159,
               21.527,
               37.343,
               17.847,
               30.255,
               15.463,
               10.239,
               25.591,
               15.467,
               8.943,
               82.815,
               10.119,
               13.903,
               56.071,
               20.431,
               15.863,
               32.135,
               16.039,
               10.463,
               20.607,
               126.847,
               18.447,
               39.063,
               27.263,
               22.943,
               10.887,
               11.537,
               38.927,
               30.999,
               9.711,
               27.295,
               10.687,
               38.967,
               55.755,
               15.183,
               14.111,
               23.719,
               14.719,
               14.431,
               33.903,
               14.055,
               11.303,
               48.107,
               15.495,
               13.479,
               41.139,
               11.383,
               60.091,
               20.991,
               9.167,
               29.791,
               11.791,
               10.799,
               16.375,
               25.463,
               9.214,
               52.007,
               11.975,
               14.879,
               12.87,
               11.071,
               10.759,
               50.695,
               13.847,
               14.295,
               12.015,
               13.055,
               14.239,
               15.839,
               10.895,
               13.703,
               57.639,
               25.079,
               9.783,
               34.435,
               18.383,
               13.527,
               15.847,
               30.414,
               8.279,
               14.239,
               27.863,
               30.359,
               31.927,
               29.023,
               18.159,
               25.256,
               15.887,
               26.311,
               28.767,
               133.903,
               10.519,
               16.335,
               13.303,
               39.143,
               17.351,
               25.174,
               10.239,
               20.495,
               11.031,
               13.359,
               27.015,
               15.575,
               15.375,
               21.895,
               8.847,
               24.871,
               24.111,
               20.543,
               12.135,
               13.383,
               9.151,
               17.127,
               15.215,
               9.543,
               10.503,
               17.263,
               11.543,
               23.287,
               12.807,
               38.183,
               10.783,
               33.183,
               13.239,
               9.135,
               12.575,
               12.799,
               10.815,
               34.167,
               31.103,
               9.703,
               29.175,
               7.011,
               12.831,
               10.567,
               15.859,
               11.319,
               10.175,
               36.427,
               27.351,
               83.42,
               10.983,
               10.079
          ],
          "average memory": 31.82,
          "goal_found_perc_improvement": 0.0,
          "average_steps_improvement": -17.4,
          "average_distance_improvement": -19.36,
          "average_smoothness_improvement": -34.62,
          "average_clearance_improvement": 5.5,
          "average_time_improvement": -1758.11,
          "average_distance_from_goal_improvement": -0.0,
          "average_path_deviation": 1.8699999999999992,
          "average_memory_improvement": 14.53
     }
}
