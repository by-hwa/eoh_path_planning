[{"map_id": 0, "success_rate": 1.0, "time_avg": 0.005725264549255371, "num_nodes_avg": 234.2, "path_length_avg": 165.5653659345051}, {"map_id": 1, "success_rate": 1.0, "time_avg": 0.13104887008666993, "num_nodes_avg": 1174.1, "path_length_avg": 303.6384871981495}, {"map_id": 2, "success_rate": 0.8, "time_avg": 0.1649103879928589, "num_nodes_avg": 1212.6, "path_length_avg": 150.03314476187808}]
{
     "operator": "e1",
     "algorithm_description": "Algorithm description: Adaptive Hybrid Sampling Tree (AHST) integrates the strengths of RRT* and informed sampling with dynamic step sizing and adaptive neighborhood radius. It begins by exploring the space broadly using larger steps and wider rewiring neighborhoods, then progressively refines the search focused around the current best solution. It samples preferentially in ellipsoidal informed subsets once an initial path is found, adjusts step sizes based on local obstacle density, and performs smoothing and lazy collision checking to improve path quality and planning speed. This approach aims to enhance convergence speed, path optimality, robustness, and success rates in complex environments.",
     "planning_mechanism": "AHST",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position          # Tuple[float, ...]\n        self.parent = parent              # Node or None\n        self.cost = cost                  # Path cost from start\n        self.children = []                # List[Node]\n        self.valid = True                 # For collision checking etc.\n\n    def distance(self, other_pos) -> float:\n        return math.dist(self.position, other_pos)\n\n    def path_to_root(self) -> list:\n        node = self\n        path = []\n        while node:\n            path.append(node.position)\n            node = node.parent\n        return path[::-1]\nclass Planner:\n    def __init__(self, max_iter: int = 5000, step_size_max: float = 3.0, step_size_min: float = 0.5, neighbor_radius_max: float = 7.0, neighbor_radius_min: float = 2.0):\n        self.max_iter = max_iter\n        self.step_size_max = step_size_max\n        self.step_size_min = step_size_min\n        self.neighbor_radius_max = neighbor_radius_max\n        self.neighbor_radius_min = neighbor_radius_min\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n        is_3d = len(bounds) == 3\n        dim = len(bounds)\n\n        # Initialize core data structures\n        nodes = []\n        edges = []\n        success_state = False\n        extracted_path = []\n        start_node = Node(start_position)\n        nodes.append(start_node)\n\n        c_best = float('inf')  # Best path cost found\n\n        # Parameters for adaptive step size and neighbor radius\n        # These will linearly interpolate between max and min values based on iteration progress\n        def adaptive_parameter(iteration):\n            frac = iteration / self.max_iter\n            step = self.step_size_max - frac * (self.step_size_max - self.step_size_min)\n            radius = self.neighbor_radius_max - frac * (self.neighbor_radius_max - self.neighbor_radius_min)\n            return step, radius\n\n        # Sampling function with adaptation to informed ellipsoid after first solution\n        def sample(iteration):\n            if c_best < float('inf'):\n                return self._sample_in_ellipse(start_position, goal_position, c_best, bounds, dim)\n            else:\n                return self._sample_uniform(bounds)\n\n        # Main loop\n        for i in range(self.max_iter):\n            step_size, neighbor_radius = adaptive_parameter(i)\n            sample_point = sample(i)\n\n            nearest = self._nearest_node(nodes, sample_point)\n            new_pos = self._steer(nearest.position, sample_point, step_size)\n            \n            # Lazy collision checking: check only along edge from nearest to new_pos\n            if self._collision(nearest.position, new_pos, obstacles, is_3d):\n                continue\n\n            new_node = Node(new_pos)\n            near_nodes = self._find_near(nodes, new_node, neighbor_radius)\n\n            # Select best parent among near nodes (including nearest) minimizing cost and collision free\n            min_cost = nearest.cost + nearest.distance(new_pos)\n            min_parent = nearest\n            for near in near_nodes:\n                if near == nearest:\n                    continue\n                cost = near.cost + near.distance(new_pos)\n                if cost < min_cost:\n                    if not self._collision(near.position, new_pos, obstacles, is_3d):\n                        min_cost = cost\n                        min_parent = near\n\n            new_node.parent = min_parent\n            new_node.cost = min_cost\n            min_parent.children.append(new_node)\n            nodes.append(new_node)\n            edges.append((min_parent, new_node))\n\n            # Rewire near nodes through new_node if it improves cost and collision free\n            for near in near_nodes:\n                if near == min_parent:\n                    continue\n                new_cost = new_node.cost + new_node.distance(near.position)\n                if new_cost + 1e-6 < near.cost:  # small epsilon for robustness\n                    if not self._collision(new_node.position, near.position, obstacles, is_3d):\n                        if near.parent:\n                            near.parent.children.remove(near)\n                        near.parent = new_node\n                        near.cost = new_cost\n                        new_node.children.append(near)\n                        edges.append((new_node, near))\n\n            # Check if new_node can connect to goal more cheaply\n            dist_to_goal = new_node.distance(goal_position)\n            if dist_to_goal <= step_size:\n                if not self._collision(new_node.position, goal_position, obstacles, is_3d):\n                    goal_node = Node(goal_position, parent=new_node, cost=new_node.cost + dist_to_goal)\n                    new_node.children.append(goal_node)\n                    nodes.append(goal_node)\n                    edges.append((new_node, goal_node))\n\n                    if goal_node.cost < c_best:\n                        c_best = goal_node.cost\n                        success_state = True\n                        extracted_path = self._extract_and_smooth_path(goal_node, obstacles, is_3d)\n\n            # Optional early termination if path is sufficiently good\n            # e.g. if path cost close to minimum euclidean dist * 1.05 --> break\n            c_min = math.dist(start_position, goal_position)\n            if success_state and c_best <= 1.05 * c_min:\n                break\n\n        return PlannerResult(\n            success=success_state,\n            path=extracted_path,\n            nodes=nodes,\n            edges=edges\n        )\n\n    def _sample_uniform(self, bounds):\n        return tuple(random.uniform(0, b) for b in bounds)\n\n    def _sample_in_ellipse(self, start, goal, c_best, bounds, dim):\n        c_min = math.dist(start, goal)\n        if c_min == 0 or c_best == float('inf'):\n            return self._sample_uniform(bounds)\n\n        # Center of ellipse\n        center = tuple((s + g) / 2 for s, g in zip(start, goal))\n        # Rotation matrix aligning x-axis with start-goal vector\n        direction = tuple(g - s for s, g in zip(start, goal))\n        length = math.dist(start, goal)\n        if length == 0:\n            return self._sample_uniform(bounds)\n\n        # Normalize direction\n        unit_dir = tuple(d / length for d in direction)\n\n        # Define ellipsoid axes lengths\n        a = c_best / 2  # major axis half-length\n        if dim == 2:\n            b = math.sqrt(max(a**2 - (c_min / 2)**2, 0.0))  # minor axis half-length\n            while True:\n                # Sample in unit circle\n                x, y = random.uniform(-1, 1), random.uniform(-1, 1)\n                if x**2 + y**2 <= 1:\n                    break\n            # Transform sample to ellipse frame\n            sample_ellipse = (a * x, b * y)\n            # Rotate sample_ellipse to world frame\n            cos_theta, sin_theta = unit_dir[0], unit_dir[1]\n            sample_rotated = (\n                cos_theta * sample_ellipse[0] - sin_theta * sample_ellipse[1],\n                sin_theta * sample_ellipse[0] + cos_theta * sample_ellipse[1]\n            )\n            sample_point = (center[0] + sample_rotated[0], center[1] + sample_rotated[1])\n            return self._clip_to_bounds(sample_point, bounds)\n\n        else:  # 3D case\n            # Major axis half-length (a)\n            # Two equal minor axes (b)\n            c_min_3d = c_min\n            a = c_best / 2\n            b = math.sqrt(max(a**2 - (c_min_3d / 2)**2, 0.0))\n            # Sample from unit ball\n            while True:\n                x, y, z = random.uniform(-1, 1), random.uniform(-1, 1), random.uniform(-1, 1)\n                if x**2 + y**2 + z**2 <= 1:\n                    break\n            # Scale sample coordinates\n            sample_unit = (a * x, b * y, b * z)\n\n            # Rotation: align major axis with start-goal vector\n            # Find orthonormal basis for rotation\n            # unit_dir = major axis vector, need two orthogonal vectors for minor axes\n            def orthonormal_basis(v):\n                if abs(v[0]) < abs(v[1]):\n                    inv_len = 1.0 / math.sqrt(v[1]*v[1] + v[2]*v[2])\n                    u1 = (0.0, -v[2]*inv_len, v[1]*inv_len)\n                else:\n                    inv_len = 1.0 / math.sqrt(v[0]*v[0] + v[2]*v[2])\n                    u1 = (-v[2]*inv_len, 0.0, v[0]*inv_len)\n                u2 = (\n                    v[1]*u1[2] - v[2]*u1[1],\n                    v[2]*u1[0] - v[0]*u1[2],\n                    v[0]*u1[1] - v[1]*u1[0]\n                )\n                return u1, u2\n\n            u1, u2 = orthonormal_basis(unit_dir)\n            rotated = (\n                unit_dir[0] * sample_unit[0] + u1[0] * sample_unit[1] + u2[0] * sample_unit[2],\n                unit_dir[1] * sample_unit[0] + u1[1] * sample_unit[1] + u2[1] * sample_unit[2],\n                unit_dir[2] * sample_unit[0] + u1[2] * sample_unit[1] + u2[2] * sample_unit[2]\n            )\n            sample_point = tuple(center[i] + rotated[i] for i in range(3))\n            return self._clip_to_bounds(sample_point, bounds)\n\n    def _clip_to_bounds(self, sample, bounds):\n        return tuple(max(0, min(s, b)) for s, b in zip(sample, bounds))\n\n    def _nearest_node(self, nodes, point):\n        return min(nodes, key=lambda n: math.dist(n.position, point))\n\n    def _steer(self, from_pos, to_pos, step_size):\n        vec = tuple(t - f for f, t in zip(from_pos, to_pos))\n        dist = math.dist(from_pos, to_pos)\n        if dist <= step_size:\n            return to_pos\n        ratio = step_size / dist\n        return tuple(f + ratio * (t - f) for f, t in zip(from_pos, to_pos))\n\n    def _collision(self, from_pos, to_pos, obstacles, is_3d, steps_mult=0.5):\n        dist = math.dist(from_pos, to_pos)\n        steps = max(int(dist / steps_mult), 1)\n        for i in range(steps + 1):\n            interp = tuple(from_pos[d] + (to_pos[d] - from_pos[d]) * i / steps for d in range(len(from_pos)))\n            if self._in_obstacle(interp, obstacles, is_3d):\n                return True\n        return False\n\n    def _in_obstacle(self, pos, obstacles, is_3d):\n        for obs in obstacles:\n            if is_3d:\n                x, y, z, w, h, d = obs\n                px, py, pz = pos\n                if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                    return True\n            else:\n                x, y, w, h = obs\n                px, py = pos\n                if x <= px <= x + w and y <= py <= y + h:\n                    return True\n        return False\n\n    def _find_near(self, nodes, new_node, radius):\n        radius_sq = radius * radius\n        result = []\n        nx, ny = new_node.position[0], new_node.position[1]\n        for node in nodes:\n            dx = node.position[0] - nx\n            dy = node.position[1] - ny\n            dist_sq = dx*dx + dy*dy\n            if dist_sq <= radius_sq:\n                result.append(node)\n        return result\n\n    def _extract_and_smooth_path(self, goal_node, obstacles, is_3d):\n        path = []\n        node = goal_node\n        while node:\n            path.append(node.position)\n            node = node.parent\n        path = path[::-1]\n\n        # Path smoothing via shortcutting\n        if len(path) <= 2:\n            return path\n\n        smoothed_path = [path[0]]\n        idx = 0\n        while idx < len(path) - 1:\n            next_idx = len(path) - 1\n            # Attempt to connect the farthest node without collision\n            for j in range(len(path) - 1, idx, -1):\n                if not self._collision(path[idx], path[j], obstacles, is_3d):\n                    next_idx = j\n                    break\n            smoothed_path.append(path[next_idx])\n            idx = next_idx\n\n        return smoothed_path",
     "objective": 21627.0523,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 0.4,
               "time_avg": 3.7307295322418215,
               "num_nodes_avg": 3333.5,
               "path_length_avg": 153.46650408230315,
               "success_improvement": -60.0,
               "time_improvement": 65062.570220917405,
               "length_improvement": -7.307604331323782,
               "objective_score": -19547.309545408956
          },
          {
               "map_id": 1,
               "success_rate": 0.1,
               "time_avg": 4.382662105560303,
               "num_nodes_avg": 3825.4,
               "path_length_avg": 217.92431631523831,
               "success_improvement": -90.0,
               "time_improvement": 3244.295988711542,
               "length_improvement": -28.229020528275626,
               "objective_score": -1012.6429925078075
          },
          {
               "map_id": 2,
               "success_rate": 0.9,
               "time_avg": 6.086120080947876,
               "num_nodes_avg": 4622.6,
               "path_length_avg": 112.00848513257502,
               "success_improvement": 9.999999999999998,
               "time_improvement": 3590.561980371681,
               "length_improvement": -25.344172909028263,
               "objective_score": -1067.0997595296985
          }
     ]
}
{
     "operator": "m1",
     "algorithm_description": "An improved hybrid path planning algorithm combining the efficiency of bidirectional RRT and the asymptotic optimality of RRT* with goal biasing, rewiring, and path smoothing. The planner grows two trees simultaneously from start and goal, attempts to connect them, and performs local rewiring and post-processing smoothing to achieve better path quality and higher success rates while reducing search time.",
     "planning_mechanism": "Initialization of two trees from start and goal; iterative sampling with goal bias; nearest node selection and steering; collision checking; connecting trees within step size; rewiring nearby nodes for cost improvement; checking for goal proximity; on success, extraction and smoothing of final path; termination after max iterations.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position        # Tuple[float, ...]\n        self.parent = parent            # Node or None\n        self.cost = cost                # Path cost\n        self.children = []\n        self.valid = True               # For collision checking etc.\n\n    def distance(self, other: 'Node') -> float:\n        return math.dist(self.position, other.position)\n\n    def path_from_root(self) -> list:\n        path = []\n        node = self\n        while node:\n            path.append(node.position)\n            node = node.parent\n        return path[::-1]\nclass Planner:\n    def __init__(self, max_iter: int = 5000, step_size: float = 1.0, goal_sample_rate: float = 0.1, neighbor_radius: float = 5.0):\n        self.max_iter = max_iter\n        self.step_size = step_size\n        self.goal_sample_rate = goal_sample_rate\n        self.neighbor_radius = neighbor_radius\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        is_3d = len(bounds) == 3\n        dim = 3 if is_3d else 2\n\n        tree_start = [Node(start_position)]\n        tree_goal = [Node(goal_position)]\n\n        def sample_point():\n            if random.random() < self.goal_sample_rate:\n                # Bias sampling towards goal or start alternately\n                return goal_position\n            return tuple(random.uniform(0, bounds[i]) for i in range(dim))\n\n        def nearest_node(tree, point):\n            return min(tree, key=lambda n: math.dist(n.position, point))\n\n        def steer(from_pos, to_pos):\n            vec = [t - f for f, t in zip(from_pos, to_pos)]\n            dist = math.dist(from_pos, to_pos)\n            if dist <= self.step_size:\n                return to_pos\n            scale = self.step_size / dist\n            return tuple(f + scale * d for f, d in zip(from_pos, vec))\n\n        def is_in_obstacle(pos):\n            for obs in obstacles:\n                if is_3d:\n                    x, y, z, w, h, d = obs\n                    px, py, pz = pos\n                    if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                        return True\n                else:\n                    x, y, w, h = obs\n                    px, py = pos\n                    if x <= px <= x + w and y <= py <= y + h:\n                        return True\n            return False\n\n        def is_edge_in_obstacle(from_pos, to_pos, steps=12):\n            for i in range(steps + 1):\n                interp = tuple(from_pos[d] + (to_pos[d] - from_pos[d]) * i / steps for d in range(dim))\n                if is_in_obstacle(interp):\n                    return True\n            return False\n\n        def find_neighbors(tree, pos):\n            return [node for node in tree if math.dist(node.position, pos) <= self.neighbor_radius]\n\n        def try_connect(node1, node2):\n            if is_edge_in_obstacle(node1.position, node2.position):\n                return False\n            return True\n\n        def rewire(tree, new_node, neighbors):\n            for neighbor in neighbors:\n                potential_cost = new_node.cost + math.dist(new_node.position, neighbor.position)\n                if potential_cost < neighbor.cost and not is_edge_in_obstacle(new_node.position, neighbor.position):\n                    # Rewire neighbor to new_node\n                    if neighbor.parent:\n                        neighbor.parent.children.remove(neighbor)\n                    neighbor.parent = new_node\n                    neighbor.cost = potential_cost\n                    new_node.children.append(neighbor)\n\n        def reconstruct_full_path(node_start, node_goal):\n            path_start = []\n            cur = node_start\n            while cur:\n                path_start.append(cur.position)\n                cur = cur.parent\n            path_start.reverse()\n\n            path_goal = []\n            cur = node_goal\n            while cur:\n                path_goal.append(cur.position)\n                cur = cur.parent\n            # path_goal.reverse()  # Inverse order\n\n            # Avoid duplication at connection point\n            if path_start[-1] == path_goal[0]:\n                return path_start + path_goal[1:]\n            return path_start + path_goal\n\n        def smooth_path(path):\n            if len(path) <= 2:\n                return path\n            smoothed = [path[0]]\n            i = 0\n            while i < len(path) -1:\n                j = len(path) -1\n                while j > i + 1:\n                    if not is_edge_in_obstacle(path[i], path[j]):\n                        break\n                    j -= 1\n                smoothed.append(path[j])\n                i = j\n            return smoothed\n\n        success_state = False\n        extracted_path: list = []\n        edges: list = []\n\n        for iter_count in range(self.max_iter):\n            sample = sample_point()\n\n            # Alternate tree to extend\n            tree_from, tree_to = (tree_start, tree_goal) if iter_count % 2 == 0 else (tree_goal, tree_start)\n\n            nearest = nearest_node(tree_from, sample)\n            new_pos = steer(nearest.position, sample)\n            if is_in_obstacle(new_pos) or is_edge_in_obstacle(nearest.position, new_pos):\n                continue\n\n            new_node = Node(new_pos)\n            # Find neighbors for rewiring\n            neighbors = find_neighbors(tree_from, new_pos)\n\n            # Select best parent among neighbors with min cost\n            best_parent = nearest\n            min_cost = nearest.cost + math.dist(nearest.position, new_pos)\n            for neighbor in neighbors:\n                temp_cost = neighbor.cost + math.dist(neighbor.position, new_pos)\n                if temp_cost < min_cost and not is_edge_in_obstacle(neighbor.position, new_pos):\n                    best_parent = neighbor\n                    min_cost = temp_cost\n\n            new_node.parent = best_parent\n            new_node.cost = min_cost\n            best_parent.children.append(new_node)\n            tree_from.append(new_node)\n\n            rewire(tree_from, new_node, neighbors)\n\n            # Attempt to connect to opposite tree\n            nearest_to = nearest_node(tree_to, new_node.position)\n            dist_to = math.dist(new_node.position, nearest_to.position)\n            if dist_to <= self.step_size and try_connect(new_node, nearest_to):\n                # Connect trees\n                connect_node = Node(nearest_to.position, parent=new_node,\n                                    cost=new_node.cost + dist_to)\n                new_node.children.append(connect_node)\n                tree_from.append(connect_node)\n                # Combine nodes for edges and path extraction\n                success_state = True\n                # Extract path: from start root to connect_node in tree_from and from connect_node to goal in tree_to\n                if tree_from is tree_start:\n                    path = reconstruct_full_path(connect_node, nearest_to)\n                    nodes = tree_start + tree_goal\n                else:\n                    path = reconstruct_full_path(nearest_to, connect_node)\n                    nodes = tree_goal + tree_start\n\n                # Smooth final path\n                path = smooth_path(path)\n\n                edges = [(node.parent, node) for node in nodes if node.parent]\n                extracted_path = path\n                break\n\n        # If fail, just collect nodes and edges\n        if not success_state:\n            nodes = tree_start + tree_goal\n            edges = [(node.parent, node) for node in nodes if node.parent]\n\n        return PlannerResult(\n            success=success_state,\n            path=extracted_path,\n            nodes=nodes,\n            edges=edges\n        )",
     "objective": 1359.85949,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 0.20377824306488038,
               "num_nodes_avg": 510.1,
               "path_length_avg": 157.29034347578835,
               "success_improvement": 0.0,
               "time_improvement": 3459.280821204739,
               "length_improvement": -4.998039542877719,
               "objective_score": -1036.784638452846
          },
          {
               "map_id": 1,
               "success_rate": 0.8,
               "time_avg": 0.928179407119751,
               "num_nodes_avg": 1752.3,
               "path_length_avg": 94.30639767535682,
               "success_improvement": -19.999999999999996,
               "time_improvement": 608.2696756606097,
               "length_improvement": -68.94122397144798,
               "objective_score": -178.6926579038933
          },
          {
               "map_id": 2,
               "success_rate": 0.8,
               "time_avg": 1.0062593698501587,
               "num_nodes_avg": 1779.3,
               "path_length_avg": 84.96769282518275,
               "success_improvement": 0.0,
               "time_improvement": 510.18555719712015,
               "length_improvement": -43.36738528007433,
               "objective_score": -144.3821901031212
          }
     ]
}
{
     "operator": "m2",
     "algorithm_description": "This algorithm is an adaptive, optimized Bi-RRT* planner that dynamically tunes its parameters like step size and neighborhood radius during planning, incorporates goal biasing, and applies partial path smoothing. These enhancements aim to improve planning efficiency, path quality, success rate, and reduce search time. It maintains the rewiring mechanism of Bi-RRT* for asymptotic optimality while adapting exploration granularity and focusing sampling toward the goal to speed convergence. After path finding, it applies smoothing to reduce unnecessary waypoints for smoother navigation.",
     "planning_mechanism": "The planner grows two trees bidirectionally from start and goal, alternately sampling points biased towards the goal and adapting step size and rewiring radius based on progress and iteration count. Nodes near the new node are rewired to reduce cost. When a connection between trees is found within dynamic thresholds, the path is extracted and smoothed. This adaptive strategy balances global exploration and local refinement efficiently.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position\n        self.parent = parent\n        self.cost = cost\n        self.children = []\n        self.valid = True\n\n    def distance(self, other: 'Node') -> float:\n        import math\n        return math.dist(self.position, other.position)\nclass Planner:\n    def __init__(self, max_iter: int = 5000, base_step_size: float = 1.5, base_radius: float = 10.0, goal_sample_rate: float = 0.15):\n        self.max_iter = max_iter\n        self.base_step_size = base_step_size\n        self.base_radius = base_radius\n        self.goal_sample_rate = goal_sample_rate  # Probability of sampling the goal directly to bias search\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        import random\n        import math\n\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        is_3d = len(bounds) == 3\n        dim = 3 if is_3d else 2\n\n        tree_start = [Node(start_position)]\n        tree_goal = [Node(goal_position)]\n\n        def in_obstacle(pos):\n            for obs in obstacles:\n                if is_3d:\n                    x, y, z, w, h, d = obs\n                    px, py, pz = pos\n                    if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                        return True\n                else:\n                    x, y, w, h = obs\n                    px, py = pos\n                    if x <= px <= x + w and y <= py <= y + h:\n                        return True\n            return False\n\n        def steer(from_pos, to_pos, step_size):\n            vec = [t - f for f, t in zip(from_pos, to_pos)]\n            dist = math.dist(from_pos, to_pos)\n            if dist == 0:\n                return to_pos\n            if dist <= step_size:\n                return to_pos\n            scale = step_size / dist\n            return tuple(f + scale * v for f, v in zip(from_pos, vec))\n\n        def near_nodes(tree, new_pos, radius):\n            return [n for n in tree if math.dist(n.position, new_pos) <= radius]\n\n        def collision_free_line(p1, p2, discretization=10):\n            \"\"\"Check collision along a line by sampling discretization points.\"\"\"\n            for i in range(1, discretization + 1):\n                interp = tuple(p1[j] + (p2[j] - p1[j]) * i / discretization for j in range(dim))\n                if in_obstacle(interp):\n                    return False\n            return True\n\n        def extract_path(node):\n            path = []\n            while node:\n                path.append(node.position)\n                node = node.parent\n            return path[::-1]\n\n        def try_connect(node_new, tree_other, step_size):\n            for n in tree_other:\n                if node_new.distance(n) <= step_size:\n                    if collision_free_line(node_new.position, n.position):\n                        return n\n            return None\n\n        def path_smooth(path, max_iter=50):\n            if len(path) < 3:\n                return path\n            for _ in range(max_iter):\n                if len(path) <= 2:\n                    break\n                i = random.randint(0, len(path) - 3)\n                j = random.randint(i + 2, len(path) - 1)\n                if collision_free_line(path[i], path[j]):\n                    del path[i + 1:j]\n            return path\n\n\n        success = False\n        connection_nodes = None\n\n        for k in range(1, self.max_iter + 1):\n\n            # Dynamic tuning: step size shrinks slightly as iterations progress for local refinement\n            step_size = max(self.base_step_size * (1 - k / self.max_iter * 0.7), 0.3)\n            # Radius shrinks but stays within a reasonable minimum to reduce rewiring overhead later\n            radius = max(self.base_radius * (1 - k / self.max_iter * 0.8), 2.5)\n\n            # Goal biased sampling to accelerate convergence\n            if random.random() < self.goal_sample_rate:\n                sample = goal_position\n            else:\n                sample = tuple(random.uniform(0, bounds[i]) for i in range(dim))\n\n            # Alternate between trees (expand start then goal)\n            for tree_a, tree_b in [(tree_start, tree_goal), (tree_goal, tree_start)]:\n                # Find nearest node in tree_a\n                nearest = min(tree_a, key=lambda n: math.dist(n.position, sample))\n                new_pos = steer(nearest.position, sample, step_size)\n                if in_obstacle(new_pos):\n                    continue\n                if not collision_free_line(nearest.position, new_pos):\n                    continue\n\n                new_node = Node(new_pos)\n                # Determine best parent among neighbors for lowest cost\n                near = near_nodes(tree_a, new_pos, radius)\n                best_parent = nearest\n                best_cost = nearest.cost + math.dist(nearest.position, new_pos)\n                for n in near:\n                    if collision_free_line(n.position, new_pos):\n                        cost = n.cost + math.dist(n.position, new_pos)\n                        if cost < best_cost:\n                            best_cost = cost\n                            best_parent = n\n                new_node.parent = best_parent\n                new_node.cost = best_cost\n                best_parent.children.append(new_node)\n                tree_a.append(new_node)\n\n                # Rewire near nodes to new node if it improves cost\n                for n in near:\n                    if n is best_parent:\n                        continue\n                    if collision_free_line(new_node.position, n.position):\n                        new_cost = new_node.cost + math.dist(new_node.position, n.position)\n                        if new_cost < n.cost:\n                            if n.parent:\n                                n.parent.children.remove(n)\n                            n.parent = new_node\n                            n.cost = new_cost\n                            new_node.children.append(n)\n\n                # Attempt to connect to other tree\n                connect_node = try_connect(new_node, tree_b, step_size)\n                if connect_node:\n                    success = True\n                    connection_nodes = (new_node, connect_node)\n                    break\n\n            if success:\n                break\n\n        nodes = tree_start + tree_goal\n        edges = [(n.parent, n) for n in nodes if n.parent]\n\n        if success and connection_nodes:\n            path_start = extract_path(connection_nodes[0])\n            path_goal = extract_path(connection_nodes[1])\n            extracted_path = path_start[:-1] + path_goal[::-1]\n            extracted_path = path_smooth(extracted_path, max_iter=75)\n        else:\n            extracted_path = []\n\n        return PlannerResult(\n            success=success,\n            path=extracted_path,\n            nodes=nodes,\n            edges=edges\n        )",
     "objective": 7229.06424,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 0.9920671701431274,
               "num_nodes_avg": 392.4,
               "path_length_avg": 151.51498719658542,
               "success_improvement": 0.0,
               "time_improvement": 17227.883482207922,
               "length_improvement": -8.486303073480828,
               "objective_score": -5166.6677840476805
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 3.5636085987091066,
               "num_nodes_avg": 1437.8,
               "path_length_avg": 111.59010656136036,
               "success_improvement": 0.0,
               "time_improvement": 2619.2974623530085,
               "length_improvement": -63.24902432788816,
               "objective_score": -773.139433840325
          },
          {
               "map_id": 2,
               "success_rate": 0.8,
               "time_avg": 7.30210120677948,
               "num_nodes_avg": 2028.9,
               "path_length_avg": 81.6241592135403,
               "success_improvement": 0.0,
               "time_improvement": 4327.920700238534,
               "length_improvement": -45.595915260532365,
               "objective_score": -1289.2570270194535
          }
     ]
}
{
     "operator": "m3",
     "algorithm_description": "A hybrid planner combining the strengths of informed sampling and bidirectional search. It grows two trees simultaneously from start and goal, incorporating informed sampling around the best current solution to focus exploration and quicken convergence toward the shortest path. By dynamically narrowing the sampling domain based on the best cost found, it efficiently balances exploration and exploitation, improving planning efficiency, success rate, and path quality.",
     "planning_mechanism": "A bidirectional RRT* variant that alternates extending start and goal trees. Sampling is uniform initially, then restricted within an informed ellipsoid once a solution is found. Each extension performs rewiring locally for path optimization. Upon connecting trees, it extracts and smooths the final path for improved path length and smoothness.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position\n        self.parent = parent\n        self.cost = cost\n        self.children = []\n        self.valid = True\n\n    def distance(self, other_pos):\n        return math.dist(self.position, other_pos)\nclass Planner:\n    def __init__(self, max_iter: int = 5000, step_size: float = 1.0, neighbor_radius: float = 5.0):\n        self.max_iter = max_iter\n        self.step_size = step_size\n        self.neighbor_radius = neighbor_radius\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        bounds = map.size\n        start_pos = map.start\n        goal_pos = map.goal\n        obstacles = map.obstacles\n        is_3d = len(bounds) == 3\n        dim = len(bounds)\n\n        tree_start = [Node(start_pos)]\n        tree_goal = [Node(goal_pos)]\n\n        best_cost = float('inf')\n        best_meeting_nodes = None\n\n        for i in range(self.max_iter):\n            if best_cost < float('inf'):\n                sample = self._sample_in_ellipse(start_pos, goal_pos, best_cost, bounds)\n            else:\n                sample = self._sample_uniform(bounds)\n\n            current_tree, other_tree = (tree_start, tree_goal) if i % 2 == 0 else (tree_goal, tree_start)\n\n            nearest = self._nearest_node(current_tree, sample)\n            new_pos = self._steer(nearest.position, sample)\n\n            if self._collision(nearest.position, new_pos, obstacles, is_3d):\n                continue\n\n            new_node = Node(new_pos, parent=nearest, cost=nearest.cost + math.dist(nearest.position, new_pos))\n            nearest.children.append(new_node)\n            current_tree.append(new_node)\n\n            near_nodes = self._find_near(current_tree, new_node)\n            min_cost = new_node.cost\n            min_parent = new_node.parent\n            # Rewire current tree locally for path improvement\n            for near in near_nodes:\n                if near == new_node.parent:\n                    continue\n                if not self._collision(near.position, new_node.position, obstacles, is_3d):\n                    cost_through_new = new_node.cost + math.dist(new_node.position, near.position)\n                    if cost_through_new < near.cost:\n                        # Rewire near node to new_node\n                        if near.parent:\n                            near.parent.children.remove(near)\n                        near.parent = new_node\n                        near.cost = cost_through_new\n                        new_node.children.append(near)\n\n                # Also consider if connecting from near to new_node improves new_node cost\n                if not self._collision(new_node.position, near.position, obstacles, is_3d):\n                    cost_through_near = near.cost + math.dist(near.position, new_node.position)\n                    if cost_through_near < min_cost:\n                        min_cost = cost_through_near\n                        min_parent = near\n            if min_parent != new_node.parent:\n                # Change parent of new_node for better cost\n                new_node.parent.children.remove(new_node)\n                new_node.parent = min_parent\n                new_node.cost = min_cost\n                min_parent.children.append(new_node)\n\n            # Try connect to other tree\n            nearest_other = self._nearest_node(other_tree, new_node.position)\n            if not self._collision(new_node.position, nearest_other.position, obstacles, is_3d) and \\\n               math.dist(new_node.position, nearest_other.position) <= self.step_size:\n\n                meeting_cost = new_node.cost + nearest_other.cost + math.dist(new_node.position, nearest_other.position)\n                if meeting_cost < best_cost:\n                    best_cost = meeting_cost\n                    best_meeting_nodes = (new_node, nearest_other)\n\n        if best_meeting_nodes is None:\n            # No path found\n            all_nodes = tree_start + tree_goal\n            edges = [(node.parent, node) for node in all_nodes if node.parent]\n            return PlannerResult(False, [], all_nodes, edges)\n\n        # Extract path from start to meeting node\n        path_start = self._extract_path(best_meeting_nodes[0])\n        # Extract path from goal to meeting node (reverse)\n        path_goal = self._extract_path(best_meeting_nodes[1])[::-1]\n        # Merge paths\n        full_path = path_start + path_goal[1:]\n\n        # Optional: path smoothing\n        smoothed_path = self._smooth_path(full_path, obstacles, is_3d)\n\n        all_nodes = tree_start + tree_goal\n        edges = [(node.parent, node) for node in all_nodes if node.parent]\n        return PlannerResult(True, smoothed_path, all_nodes, edges)\n\n    def _sample_uniform(self, bounds):\n        return tuple(random.uniform(0, b) for b in bounds)\n\n    def _sample_in_ellipse(self, start, goal, c_best, bounds):\n        c_min = math.dist(start, goal)\n        if c_min == 0 or c_best == float('inf'):\n            return self._sample_uniform(bounds)\n\n        center = tuple((s + g) / 2 for s, g in zip(start, goal))\n        dir_vec = tuple((g - s) / c_min for s, g in zip(start, goal))\n        a = c_best / 2\n        b = math.sqrt(max(a**2 - (c_min / 2)**2, 0))\n\n        # Generate point in unit circle\n        while True:\n            x = random.uniform(-1, 1)\n            y = random.uniform(-1, 1)\n            if x*x + y*y <=1:\n                break\n\n        # 2D ellipse param: rotate sample to align with start-goal direction\n        sample_local = (a * x, b * y)\n\n        # Rotation matrix for 2D dir_vec (cos, sin)\n        cos_theta = dir_vec[0]\n        sin_theta = dir_vec[1]\n\n        sample = (\n            center[0] + sample_local[0]*cos_theta - sample_local[1]*sin_theta,\n            center[1] + sample_local[0]*sin_theta + sample_local[1]*cos_theta\n        )\n\n        # Clip sample to bounds\n        sample = tuple(max(0, min(s, b)) for s, b in zip(sample, bounds))\n        return sample\n\n    def _nearest_node(self, tree, point):\n        return min(tree, key=lambda n: math.dist(n.position, point))\n\n    def _steer(self, from_pos, to_pos):\n        dist = math.dist(from_pos, to_pos)\n        if dist <= self.step_size:\n            return to_pos\n        scale = self.step_size / dist\n        return tuple(f + scale * (t - f) for f, t in zip(from_pos, to_pos))\n\n    def _collision(self, from_pos, to_pos, obstacles, is_3d):\n        steps = max(1, int(math.dist(from_pos, to_pos) / 0.5))\n        for i in range(steps + 1):\n            interp = tuple(f + (t - f) * i / steps for f, t in zip(from_pos, to_pos))\n            if self._in_obstacle(interp, obstacles, is_3d):\n                return True\n        return False\n\n    def _in_obstacle(self, pos, obstacles, is_3d):\n        for obs in obstacles:\n            if is_3d:\n                x, y, z, w, h, d = obs\n                if x <= pos[0] <= x + w and y <= pos[1] <= y + h and z <= pos[2] <= z + d:\n                    return True\n            else:\n                x, y, w, h = obs\n                if x <= pos[0] <= x + w and y <= pos[1] <= y + h:\n                    return True\n        return False\n\n    def _find_near(self, tree, node):\n        return [n for n in tree if n.distance(node.position) <= self.neighbor_radius]\n\n    def _extract_path(self, node):\n        path = []\n        while node:\n            path.append(node.position)\n            node = node.parent\n        return path[::-1]\n\n    def _smooth_path(self, path, obstacles, is_3d, max_iter=50):\n        if len(path) < 3:\n            return path\n        for _ in range(max_iter):\n            if len(path) < 3:\n                break\n            i = random.randint(0, len(path) - 3)\n            j = random.randint(i + 2, len(path) -1)\n            if not self._collision(path[i], path[j], obstacles, is_3d):\n                path = path[:i+1] + path[j:]\n        return path",
     "objective": 35611.95399,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 6.591220021247864,
               "num_nodes_avg": 3058.8,
               "path_length_avg": 149.45975008549323,
               "success_improvement": 0.0,
               "time_improvement": 115025.16084702354,
               "length_improvement": -9.727647903960177,
               "objective_score": -34505.60272452627
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 2.4142558574676514,
               "num_nodes_avg": 2329.5,
               "path_length_avg": 228.47672743865897,
               "success_improvement": 0.0,
               "time_improvement": 1742.2561414462934,
               "length_improvement": -24.753699853089177,
               "objective_score": -517.7261024632702
          },
          {
               "map_id": 2,
               "success_rate": 0.8,
               "time_avg": 3.421843147277832,
               "num_nodes_avg": 2789.4,
               "path_length_avg": 121.03013640156877,
               "success_improvement": 0.0,
               "time_improvement": 1974.971254949693,
               "length_improvement": -19.331067416030518,
               "objective_score": -588.6251630017017
          }
     ]
}
{
     "operator": "e2",
     "algorithm_description": "A hybrid path planner combining the bidirectional growth and greedy connection strategy of RRT-Connect with the rewiring, cost optimization, and goal-biased sampling of RRT*. This planner grows two trees alternately while performing incremental connection attempts and rewiring to improve path quality dynamically. It integrates goal biasing for efficient exploration, rewiring for cost optimization, and a smoothing post-process to produce high-quality, smooth paths with better success rates and reduced search times.",
     "planning_mechanism": "The planner initializes two trees from start and goal, samples points with goal bias alternately, extends one tree greedily towards the sample while rewiring nearby nodes to minimize cost, then tries to connect the opposite tree greedily to the new node. Trees are swapped each iteration to balance exploration. Upon connection, the path is extracted and smoothed before returning the final result.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position\n        self.parent = parent\n        self.cost = cost\n        self.children = []\n        self.valid = True\n\n    def distance(self, other: 'Node') -> float:\n        return math.dist(self.position, other.position)\n\n    def path_from_root(self) -> list:\n        path = []\n        node = self\n        while node:\n            path.append(node.position)\n            node = node.parent\n        return path[::-1]\nclass Planner:\n    def __init__(self, max_iter: int = 5000, step_size: float = 1.0, goal_sample_rate: float = 0.1, neighbor_radius: float = 5.0):\n        self.max_iter = max_iter\n        self.step_size = step_size\n        self.goal_sample_rate = goal_sample_rate\n        self.neighbor_radius = neighbor_radius\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        is_3d = len(bounds) == 3\n        dim = 3 if is_3d else 2\n\n        tree_start = [Node(start_position)]\n        tree_goal = [Node(goal_position)]\n\n        def sample_point():\n            if random.random() < self.goal_sample_rate:\n                # Alternate goal bias: bias toward goal when expanding start tree, toward start when expanding goal tree\n                return goal_position if expanding_start else start_position\n            return tuple(random.uniform(0, bounds[i]) for i in range(dim))\n\n        def nearest_node(tree, point):\n            return min(tree, key=lambda n: math.dist(n.position, point))\n\n        def steer(from_pos, to_pos):\n            vec = [t - f for f, t in zip(from_pos, to_pos)]\n            dist = math.dist(from_pos, to_pos)\n            if dist <= self.step_size:\n                return to_pos\n            scale = self.step_size / dist\n            return tuple(f + scale * d for f, d in zip(from_pos, vec))\n\n        def is_in_obstacle(pos):\n            for obs in obstacles:\n                if is_3d:\n                    x, y, z, w, h, d = obs\n                    px, py, pz = pos\n                    if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                        return True\n                else:\n                    x, y, w, h = obs\n                    px, py = pos\n                    if x <= px <= x + w and y <= py <= y + h:\n                        return True\n            return False\n\n        def is_edge_in_obstacle(from_pos, to_pos, steps=12):\n            for i in range(steps + 1):\n                interp = tuple(from_pos[d] + (to_pos[d] - from_pos[d]) * i / steps for d in range(dim))\n                if is_in_obstacle(interp):\n                    return True\n            return False\n\n        def find_neighbors(tree, pos):\n            return [node for node in tree if math.dist(node.position, pos) <= self.neighbor_radius]\n\n        def rewire(tree, new_node, neighbors):\n            for neighbor in neighbors:\n                potential_cost = new_node.cost + math.dist(new_node.position, neighbor.position)\n                if potential_cost < neighbor.cost and not is_edge_in_obstacle(new_node.position, neighbor.position):\n                    # Rewire neighbor to new_node\n                    if neighbor.parent:\n                        try:\n                            neighbor.parent.children.remove(neighbor)\n                        except ValueError:\n                            pass\n                    neighbor.parent = new_node\n                    neighbor.cost = potential_cost\n                    new_node.children.append(neighbor)\n\n        def smooth_path(path):\n            if len(path) <= 2:\n                return path\n            smoothed = [path[0]]\n            i = 0\n            while i < len(path) - 1:\n                j = len(path) - 1\n                while j > i + 1:\n                    if not is_edge_in_obstacle(path[i], path[j]):\n                        break\n                    j -= 1\n                smoothed.append(path[j])\n                i = j\n            return smoothed\n\n        def extract_path(node_start, node_goal):\n            path_start = []\n            cur = node_start\n            while cur:\n                path_start.append(cur.position)\n                cur = cur.parent\n            path_start.reverse()\n\n            path_goal = []\n            cur = node_goal\n            while cur:\n                path_goal.append(cur.position)\n                cur = cur.parent\n\n            if path_start[-1] == path_goal[0]:\n                return path_start + path_goal[1:]\n            return path_start + path_goal\n\n        def extend(tree, target_pos):\n            nearest = nearest_node(tree, target_pos)\n            new_pos = steer(nearest.position, target_pos)\n            if is_in_obstacle(new_pos) or is_edge_in_obstacle(nearest.position, new_pos):\n                return None\n            new_node = Node(new_pos)\n\n            neighbors = find_neighbors(tree, new_pos)\n\n            best_parent = nearest\n            min_cost = nearest.cost + math.dist(nearest.position, new_pos)\n            for neighbor in neighbors:\n                temp_cost = neighbor.cost + math.dist(neighbor.position, new_pos)\n                if temp_cost < min_cost and not is_edge_in_obstacle(neighbor.position, new_pos):\n                    best_parent = neighbor\n                    min_cost = temp_cost\n\n            new_node.parent = best_parent\n            new_node.cost = min_cost\n            best_parent.children.append(new_node)\n            tree.append(new_node)\n\n            rewire(tree, new_node, neighbors)\n\n            return new_node\n\n        def connect(tree, target_node):\n            current_node = None\n            while True:\n                new_node = extend(tree, target_node.position)\n                if not new_node:\n                    return None\n                current_node = new_node\n                if current_node.distance(target_node) <= self.step_size:\n                    return current_node\n\n        success_state = False\n        extracted_path = []\n        nodes = []\n        edges = []\n\n        for iter_count in range(self.max_iter):\n            expanding_start = (iter_count % 2 == 0)\n            tree_from = tree_start if expanding_start else tree_goal\n            tree_to = tree_goal if expanding_start else tree_start\n\n            sample = sample_point()\n\n            new_node = extend(tree_from, sample)\n            if not new_node:\n                continue\n\n            connect_node = connect(tree_to, new_node)\n            if connect_node:\n                success_state = True\n                if expanding_start:\n                    path = extract_path(new_node, connect_node)\n                    nodes = tree_start + tree_goal\n                else:\n                    path = extract_path(connect_node, new_node)\n                    nodes = tree_goal + tree_start\n\n                path = smooth_path(path)\n                edges = [(node.parent, node) for node in nodes if node.parent]\n                extracted_path = path\n                break\n\n        if not success_state:\n            nodes = tree_start + tree_goal\n            edges = [(node.parent, node) for node in nodes if node.parent]\n\n        return PlannerResult(\n            success=success_state,\n            path=extracted_path,\n            nodes=nodes,\n            edges=edges\n        )",
     "objective": 428.14497,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 0.05412294864654541,
               "num_nodes_avg": 219.3,
               "path_length_avg": 147.23513780147883,
               "success_improvement": 0.0,
               "time_improvement": 845.3353322089658,
               "length_improvement": -11.0712938237804,
               "objective_score": -251.38634089793368
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 0.5312545537948609,
               "num_nodes_avg": 1253.9,
               "path_length_avg": 93.81518791431704,
               "success_improvement": 0.0,
               "time_improvement": 305.386596193857,
               "length_improvement": -69.10299850983819,
               "objective_score": -77.79537915618945
          },
          {
               "map_id": 2,
               "success_rate": 0.7,
               "time_avg": 0.7116815567016601,
               "num_nodes_avg": 1395.9,
               "path_length_avg": 108.74621135939525,
               "success_improvement": -10.000000000000009,
               "time_improvement": 331.55653525748664,
               "length_improvement": -27.518541631591148,
               "objective_score": -98.96325225092775
          }
     ]
}
{
     "operator": "m1",
     "algorithm_description": "This algorithm implements an optimized bidirectional RRT* (Rapidly-exploring Random Tree Star) planner. It grows two trees\u2014from start and goal simultaneously\u2014and rewires nodes to continuously improve path quality and reduce path cost. The bidirectional growth improves success rate and efficiency, while rewiring improves path smoothness and shortens path length. (The planner initializes two trees rooted at start and goal points. At each iteration, it samples a random point and extends the start tree toward it using RRT* logic (steering, collision checking, nearest neighbor, neighbor radius rewiring for lower cost). Then it attempts to connect the goal tree to the newly added start tree node with repeated greedy extensions. Trees are alternated each iteration. When trees connect, the best combined path is extracted and returned. If the maximum iterations are reached without connection, the planner returns failure with explored trees.)",
     "planning_mechanism": "Rapidly-exploring Random Tree Star",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position        # Tuple[float, ...] \u2192 2D: (x,y), 3D: (x,y,z)\n        self.parent = parent            # Node or None\n        self.cost = cost                # Cost to reach this node from start root\n        self.children = []\n        self.valid = True               # For collision checking etc.\n\n    def distance(self, other: 'Node') -> float:\n        return math.dist(self.position, other.position)\n\n    def set_parent(self, new_parent: 'Node', new_cost: float):\n        if self.parent:\n            self.parent.children.remove(self)\n        self.parent = new_parent\n        self.cost = new_cost\n        new_parent.children.append(self)\nclass Planner:\n    def __init__(self, max_iter: int = 5000, step_size: float = 1.0, neighbor_radius: float = 5.0, goal_sample_rate: float = 0.1):\n        self.max_iter = max_iter\n        self.step_size = step_size\n        self.neighbor_radius = neighbor_radius\n        self.goal_sample_rate = goal_sample_rate\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        is_3d = len(bounds) == 3\n        dim = 3 if is_3d else 2\n\n        tree_start: List[Node] = [Node(start_position)]\n        tree_goal: List[Node] = [Node(goal_position)]\n\n        def nearest(tree: List[Node], point: Tuple[float, ...]) -> Node:\n            return min(tree, key=lambda n: math.dist(n.position, point))\n\n        def near(tree: List[Node], point: Tuple[float, ...], radius: float) -> List[Node]:\n            return [n for n in tree if math.dist(n.position, point) <= radius]\n\n        def steer(from_pos: Tuple[float, ...], to_pos: Tuple[float, ...], step: float) -> Tuple[float, ...]:\n            vec = [t - f for f, t in zip(from_pos, to_pos)]\n            dist = math.dist(from_pos, to_pos)\n            if dist <= step:\n                return to_pos\n            scale = step / dist\n            return tuple(f + scale * d for f, d in zip(from_pos, vec))\n\n        def collision_free(p1: Tuple[float, ...], p2: Tuple[float, ...]) -> bool:\n            # Check the line segment between p1 and p2 for collision at fine resolution\n            n_checks = max(int(math.dist(p1, p2) / (self.step_size / 2)), 1)\n            for i in range(n_checks + 1):\n                pos = tuple(p1[j] + (p2[j] - p1[j]) * i / n_checks for j in range(dim))\n                if self._is_in_obstacle(pos, obstacles, is_3d):\n                    return False\n            return True\n\n        def rewire(tree: List[Node], new_node: Node):\n            neighbors = near(tree, new_node.position, self.neighbor_radius)\n            for neighbor in neighbors:\n                if neighbor == new_node.parent:\n                    continue\n                if collision_free(new_node.position, neighbor.position):\n                    cost_through_new = new_node.cost + math.dist(new_node.position, neighbor.position)\n                    if cost_through_new < neighbor.cost:\n                        neighbor.set_parent(new_node, cost_through_new)\n                        self._update_children_cost(neighbor)\n\n        def try_extend(tree: List[Node], point: Tuple[float, ...]) -> Node or None:\n            nearest_node = nearest(tree, point)\n            new_pos = steer(nearest_node.position, point, self.step_size)\n            if collision_free(nearest_node.position, new_pos):\n                new_cost = nearest_node.cost + math.dist(nearest_node.position, new_pos)\n                new_node = Node(new_pos)\n                # Initialize cost and parent with best connection (RRT* logic)\n                neighbors = near(tree, new_pos, self.neighbor_radius)\n                min_cost = new_cost\n                min_parent = nearest_node\n                for neighbor in neighbors:\n                    if collision_free(neighbor.position, new_pos):\n                        cost_through_neighbor = neighbor.cost + math.dist(neighbor.position, new_pos)\n                        if cost_through_neighbor < min_cost:\n                            min_cost = cost_through_neighbor\n                            min_parent = neighbor\n                new_node.cost = min_cost\n                new_node.parent = min_parent\n                min_parent.children.append(new_node)\n                tree.append(new_node)\n                # Rewire neighbors if beneficial\n                rewire(tree, new_node)\n                return new_node\n            return None\n\n        def try_connect(tree: List[Node], target_pos: Tuple[float, ...]) -> Node or None:\n            \"\"\"\n            Greedily extend tree towards target_pos until collision or within step_size\n            Returns last extended node or None on failure.\n            \"\"\"\n            current_node = None\n            while True:\n                if len(tree) == 0:\n                    return None\n                nearest_node = nearest(tree, target_pos)\n                new_pos = steer(nearest_node.position, target_pos, self.step_size)\n                if not collision_free(nearest_node.position, new_pos):\n                    return current_node\n                new_cost = nearest_node.cost + math.dist(nearest_node.position, new_pos)\n                new_node = Node(new_pos)\n                new_node.parent = nearest_node\n                new_node.cost = new_cost\n                nearest_node.children.append(new_node)\n                tree.append(new_node)\n                current_node = new_node\n                if math.dist(new_pos, target_pos) <= self.step_size:\n                    return new_node\n\n        def extract_path(meet_node_start: Node, meet_node_goal: Node) -> List[Tuple[float, ...]]:\n            path_start = []\n            node = meet_node_start\n            while node:\n                path_start.append(node.position)\n                node = node.parent\n            path_start.reverse()\n\n            path_goal = []\n            node = meet_node_goal\n            while node:\n                path_goal.append(node.position)\n                node = node.parent\n\n            # To avoid duplicate meet position in middle, omit start of goal path\n            return path_start + path_goal[1:]\n\n        best_path = None\n        best_cost = float('inf')\n        meeting = None\n\n        for i in range(self.max_iter):\n            if random.random() < self.goal_sample_rate:\n                rnd_point = goal_position\n            else:\n                rnd_point = tuple(random.uniform(0, bounds[d]) for d in range(dim))\n\n            new_node_start = try_extend(tree_start, rnd_point)\n            if new_node_start is not None:\n                new_node_goal = try_connect(tree_goal, new_node_start.position)\n                if new_node_goal is not None:\n                    total_cost = new_node_start.cost + new_node_goal.cost + math.dist(new_node_start.position, new_node_goal.position)\n                    if total_cost < best_cost:\n                        best_cost = total_cost\n                        meeting = (new_node_start, new_node_goal)\n                        best_path = extract_path(new_node_start, new_node_goal)\n\n            # Swap trees\n            tree_start, tree_goal = tree_goal, tree_start\n\n        success_state = best_path is not None\n        nodes = tree_start + tree_goal\n        edges = [(n.parent, n) for n in nodes if n.parent]\n        extracted_path = best_path if success_state else []\n\n        return PlannerResult(\n            success=success_state,\n            path=extracted_path,\n            nodes=nodes,\n            edges=edges\n        )\n\n    def _is_in_obstacle(self, pos: Tuple[float, ...], obstacles: List[Tuple], is_3d: bool) -> bool:\n        for obs in obstacles:\n            if is_3d:\n                x, y, z, w, h, d = obs\n                px, py, pz = pos\n                if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                    return True\n            else:\n                x, y, w, h = obs\n                px, py = pos\n                if x <= px <= x + w and y <= py <= y + h:\n                    return True\n        return False\n\n    def _update_children_cost(self, node: Node):\n        # Propagate cost changes recursively to children\n        for child in node.children:\n            old_cost = child.cost\n            new_cost = node.cost + math.dist(node.position, child.position)\n            if new_cost < old_cost:\n                child.cost = new_cost\n                child.parent = node\n                self._update_children_cost(child)",
     "objective": 74771.73535,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 13.906500792503357,
               "num_nodes_avg": 6896.0,
               "path_length_avg": 138.65943393115998,
               "success_improvement": 0.0,
               "time_improvement": 242797.08663876567,
               "length_improvement": -16.250942249593834,
               "objective_score": -72835.87580317978
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 3.976874279975891,
               "num_nodes_avg": 4250.9,
               "path_length_avg": 92.98758099299656,
               "success_improvement": 0.0,
               "time_improvement": 2934.649804569671,
               "length_improvement": -69.37556175732283,
               "objective_score": -866.5198290194367
          },
          {
               "map_id": 2,
               "success_rate": 1.0,
               "time_avg": 6.185709476470947,
               "num_nodes_avg": 4997.0,
               "path_length_avg": 30.41264223012365,
               "success_improvement": 19.999999999999996,
               "time_improvement": 3650.9519877782386,
               "length_improvement": -79.72938427812572,
               "objective_score": -1069.3397194778465
          }
     ]
}
{
     "operator": "m2",
     "algorithm_description": "This implementation enhances the classic RRT by incorporating goal bias, dynamic step size adjustment, and a simplistic rewiring step inspired by RRT*. The goal bias accelerates convergence by sampling the goal more frequently. The step size adapts based on the proximity to the goal, allowing finer movements near the goal for path quality. Rewiring attempts improve path optimality by connecting new nodes to nearby better parents when collision-free. This combination aims to improve planning efficiency, success rate, and path quality while maintaining robustness and reasonable computation time.",
     "planning_mechanism": "The planner initializes with the start node and repeatedly samples nodes biased toward the goal to grow the tree. It steers toward random or goal-sampled points with dynamic step size, checks collisions, adds nodes, and performs local rewiring for path improvement. Upon reaching near the goal, it extracts the path by backtracking parent nodes.",
     "code": "class Node:\n    def __init__(self, position: Tuple[float, ...], parent: 'Node' = None, cost: float = 0.0):\n        self.position = position          # Tuple[float, ...]: 2D or 3D\n        self.parent = parent              # Node or None\n        self.cost = cost                  # Cost from start\n        self.children: List[Node] = []    # Children nodes\n        self.valid = True                 # For collision or pruning\n\n    def distance(self, other: 'Node') -> float:\n        return math.dist(self.position, other.position)\n\n    def path_nodes(self) -> List['Node']:\n        # Return nodes from start to self\n        node, path = self, []\n        while node:\n            path.append(node)\n            node = node.parent\n        return path[::-1]\nclass Planner:\n    def __init__(self, max_iter: int = 4000, goal_sample_rate: float = 0.1,\n                 min_step_size: float = 0.5, max_step_size: float = 2.0,\n                 neighbor_radius: float = 5.0):\n        self.max_iter = max_iter\n        self.goal_sample_rate = goal_sample_rate\n        self.min_step_size = min_step_size\n        self.max_step_size = max_step_size\n        self.neighbor_radius = neighbor_radius\n\n    def plan(self, map: 'Map') -> PlannerResult:\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        is_3d = len(bounds) == 3\n        dim = 3 if is_3d else 2\n\n        root = Node(start_position)\n        nodes: List[Node] = [root]\n\n        def collision_free(pos1: Tuple[float, ...], pos2: Tuple[float, ...]) -> bool:\n            # Check path collision from pos1 to pos2 with small interpolation steps\n            dist = math.dist(pos1, pos2)\n            steps = max(int(dist / 0.2), 1)\n            for i in range(steps + 1):\n                interp = tuple(\n                    pos1[j] + (pos2[j] - pos1[j]) * i / steps for j in range(dim)\n                )\n                if self._is_in_obstacle(interp, obstacles, is_3d):\n                    return False\n            return True\n\n        def find_near_nodes(new_node: Node) -> List[Node]:\n            r = self.neighbor_radius\n            return [node for node in nodes if node.distance(new_node) <= r]\n\n        def choose_parent(new_node: Node, near_nodes: List[Node]):\n            # Try to find a better parent minimizing cost + collision free\n            min_cost = new_node.cost\n            best_parent = new_node.parent\n            for near_node in near_nodes:\n                if near_node == new_node.parent:\n                    continue\n                if collision_free(near_node.position, new_node.position):\n                    cost = near_node.cost + near_node.distance(new_node)\n                    if cost < min_cost:\n                        min_cost = cost\n                        best_parent = near_node\n            if best_parent != new_node.parent:\n                # Update parent links\n                if new_node.parent:\n                    try:\n                        new_node.parent.children.remove(new_node)\n                    except ValueError:\n                        pass\n                new_node.parent = best_parent\n                new_node.cost = min_cost\n                best_parent.children.append(new_node)\n\n        def rewire(new_node: Node, near_nodes: List[Node]):\n            for near_node in near_nodes:\n                if near_node == new_node.parent:\n                    continue\n                if collision_free(new_node.position, near_node.position):\n                    new_cost = new_node.cost + new_node.distance(near_node)\n                    if new_cost < near_node.cost:\n                        # Rewire near_node to new_node\n                        if near_node.parent:\n                            try:\n                                near_node.parent.children.remove(near_node)\n                            except ValueError:\n                                pass\n                        near_node.parent = new_node\n                        near_node.cost = new_cost\n                        new_node.children.append(near_node)\n                        self._update_children_costs(near_node)\n\n        for _ in range(self.max_iter):\n            # 1. Sample point with goal bias\n            if random.random() < self.goal_sample_rate:\n                sample = goal_position\n            else:\n                sample = tuple(random.uniform(0, bounds[i]) for i in range(dim))\n\n            # 2. Nearest node\n            nearest = min(nodes, key=lambda n: math.dist(n.position, sample))\n\n            # 3. Dynamic step size: smaller step near goal for fine path\n            dist_to_goal = math.dist(nearest.position, goal_position)\n            step_size = self.max_step_size if dist_to_goal > self.neighbor_radius else self.min_step_size\n\n            # 4. Steer\n            new_position = self._steer(nearest.position, sample, step_size)\n            if not collision_free(nearest.position, new_position):\n                continue\n\n            new_node = Node(new_position, parent=nearest, cost=nearest.cost + nearest.distance(Node(new_position)))\n            nearest.children.append(new_node)\n            nodes.append(new_node)\n\n            # 5. Find neighbors and choose best parent\n            near_nodes = find_near_nodes(new_node)\n            choose_parent(new_node, near_nodes)\n\n            # 6. Rewire neighbors\n            rewire(new_node, near_nodes)\n\n            # 7. Check goal reached with collision path\n            if math.dist(new_position, goal_position) <= step_size:\n                if collision_free(new_position, goal_position):\n                    goal_node = Node(goal_position, parent=new_node,\n                                     cost=new_node.cost + math.dist(new_position, goal_position))\n                    new_node.children.append(goal_node)\n                    nodes.append(goal_node)\n                    success_state = True\n                    extracted_path = self._extract_path(goal_node)\n                    edges = [(node.parent, node) for node in nodes if node.parent]\n                    return PlannerResult(success_state, extracted_path, nodes, edges)\n\n        # Failure - no path found\n        edges = [(node.parent, node) for node in nodes if node.parent]\n        return PlannerResult(False, [], nodes, edges)\n\n    def _steer(self, from_pos: Tuple[float, ...], to_pos: Tuple[float, ...], step_size: float) -> Tuple[float, ...]:\n        vec = [t - f for f, t in zip(from_pos, to_pos)]\n        dist = math.dist(from_pos, to_pos)\n        if dist <= step_size:\n            return to_pos\n        scale = step_size / dist\n        return tuple(f + scale * d for f, d in zip(from_pos, vec))\n\n    def _is_in_obstacle(self, pos: Tuple[float, ...], obstacles: List[Tuple], is_3d: bool) -> bool:\n        for obs in obstacles:\n            if is_3d:\n                x, y, z, w, h, d = obs\n                px, py, pz = pos\n                if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                    return True\n            else:\n                x, y, w, h = obs\n                px, py = pos\n                if x <= px <= x + w and y <= py <= y + h:\n                    return True\n        return False\n\n    def _extract_path(self, node: Node) -> List[Tuple[float, ...]]:\n        path = []\n        while node:\n            path.append(node.position)\n            node = node.parent\n        return path[::-1]\n\n    def _update_children_costs(self, node: Node) -> None:\n        # Recursively update costs of children nodes after rewiring\n        for child in node.children:\n            old_cost = child.cost\n            child.cost = node.cost + node.distance(child)\n            if child.cost < old_cost:\n                self._update_children_costs(child)",
     "objective": 5534.93541,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 0.8251890897750854,
               "num_nodes_avg": 597.9,
               "path_length_avg": 163.8182929876803,
               "success_improvement": 0.0,
               "time_improvement": 14313.117204905575,
               "length_improvement": -1.0552164318689174,
               "objective_score": -4293.724118185299
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 4.129970145225525,
               "num_nodes_avg": 2506.4,
               "path_length_avg": 234.54052992219098,
               "success_improvement": 0.0,
               "time_improvement": 3051.4732957973197,
               "length_improvement": -22.7566531217982,
               "objective_score": -910.8906581148362
          },
          {
               "map_id": 2,
               "success_rate": 1.0,
               "time_avg": 2.0541722774505615,
               "num_nodes_avg": 1457.2,
               "path_length_avg": 124.76619934800847,
               "success_improvement": 19.999999999999996,
               "time_improvement": 1145.6294005805826,
               "length_improvement": -16.84090902311719,
               "objective_score": -330.3206383695513
          }
     ]
}
{
     "operator": "m3",
     "algorithm_description": "A streamlined and generalized RRT* planner that balances path quality and computational efficiency by simplifying neighborhood search with a fixed radius, integrating goal biasing, and maintaining essential rewiring for asymptotic optimality. The planner supports both 2D and 3D environments and focuses on clarity and performance improvements by avoiding overcomplexity, ensuring robustness and scalable path smoothing.",
     "planning_mechanism": "The Planner initializes at the start, iteratively samples points with goal bias, extends toward samples with collision checks, selects the best parent among neighbors within a fixed radius, rewires neighbors if a better path is found, and stops once the goal is connected or max iterations are reached. The final path is extracted by backtracking from the goal node.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position        # Tuple[float, ...]\n        self.parent = parent            # Node or None\n        self.cost = cost                # Path cost from start\n        self.children = []\n        self.valid = True\n\n    def distance(self, other: 'Node') -> float:\n        return math.dist(self.position, other.position)\nclass Planner:\n    def __init__(self, max_iter: int = 4000, step_size: float = 1.0, goal_sample_rate: float = 0.1, neighbor_radius: float = 3.0):\n        self.max_iter = max_iter\n        self.step_size = step_size\n        self.goal_sample_rate = goal_sample_rate\n        self.neighbor_radius = neighbor_radius\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        dim = len(bounds)\n        is_3d = (dim == 3)\n\n        root = Node(start_position)\n        nodes = [root]\n        goal_node = None\n\n        def in_obstacle(pos):\n            for obs in obstacles:\n                if is_3d:\n                    x, y, z, w, h, d = obs\n                    px, py, pz = pos\n                    if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                        return True\n                else:\n                    x, y, w, h = obs\n                    px, py = pos\n                    if x <= px <= x + w and y <= py <= y + h:\n                        return True\n            return False\n\n        def edge_in_obstacle(p1, p2, steps=8):\n            for i in range(steps + 1):\n                interp = tuple(p1[d] + (p2[d] - p1[d]) * i / steps for d in range(dim))\n                if in_obstacle(interp):\n                    return True\n            return False\n\n        def steer(from_pos, to_pos):\n            vec = [to_pos[i] - from_pos[i] for i in range(dim)]\n            dist = math.dist(from_pos, to_pos)\n            if dist <= self.step_size:\n                return to_pos\n            scale = self.step_size / dist\n            return tuple(from_pos[i] + vec[i] * scale for i in range(dim))\n\n        def extract_path(node):\n            path = []\n            while node:\n                path.append(node.position)\n                node = node.parent\n            return path[::-1]\n\n        for _ in range(self.max_iter):\n            sample = goal_position if random.random() < self.goal_sample_rate else tuple(random.uniform(0, bounds[i]) for i in range(dim))\n            nearest = min(nodes, key=lambda n: math.dist(n.position, sample))\n            new_pos = steer(nearest.position, sample)\n\n            if in_obstacle(new_pos):\n                continue\n\n            # Neighborhood nodes within fixed radius\n            neighbors = [n for n in nodes if math.dist(n.position, new_pos) <= self.neighbor_radius and not edge_in_obstacle(n.position, new_pos)]\n\n            # Best parent selection (including nearest if not in neighbors)\n            candidates = neighbors + ([nearest] if nearest not in neighbors else [])\n            best_parent = None\n            min_cost = float('inf')\n            for n in candidates:\n                cost = n.cost + math.dist(n.position, new_pos)\n                if cost < min_cost:\n                    best_parent = n\n                    min_cost = cost\n\n            if best_parent is None:\n                continue\n\n            new_node = Node(new_pos, parent=best_parent, cost=min_cost)\n            best_parent.children.append(new_node)\n            nodes.append(new_node)\n\n            # Rewire neighbors\n            for neighbor in neighbors:\n                if neighbor == best_parent:\n                    continue\n                cost_through_new = new_node.cost + math.dist(new_node.position, neighbor.position)\n                if cost_through_new < neighbor.cost and not edge_in_obstacle(new_node.position, neighbor.position):\n                    if neighbor.parent:\n                        try:\n                            neighbor.parent.children.remove(neighbor)\n                        except ValueError:\n                            pass\n                    neighbor.parent = new_node\n                    neighbor.cost = cost_through_new\n                    new_node.children.append(neighbor)\n\n            # Goal check\n            if math.dist(new_node.position, goal_position) <= self.step_size and not edge_in_obstacle(new_node.position, goal_position):\n                goal_node = Node(goal_position, parent=new_node, cost=new_node.cost + math.dist(new_node.position, goal_position))\n                new_node.children.append(goal_node)\n                nodes.append(goal_node)\n                success_state = True\n                extracted_path = extract_path(goal_node)\n                edges = [(n.parent, n) for n in nodes if n.parent]\n                return PlannerResult(True, extracted_path, nodes, edges)\n\n        edges = [(n.parent, n) for n in nodes if n.parent]\n        return PlannerResult(False, [], nodes, edges)",
     "objective": 3637.09478,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 0.6606990575790406,
               "num_nodes_avg": 1011.4,
               "path_length_avg": 165.99983744138916,
               "success_improvement": 0.0,
               "time_improvement": 11440.061631998668,
               "length_improvement": 0.2624169036994857,
               "objective_score": -3432.0709729803402
          },
          {
               "map_id": 1,
               "success_rate": 0.0,
               "time_avg": 2.111004948616028,
               "num_nodes_avg": 2380.0,
               "path_length_avg": NaN,
               "success_improvement": -100.0,
               "time_improvement": 1510.8532238545076,
               "length_improvement": NaN,
               "objective_score": NaN
          },
          {
               "map_id": 2,
               "success_rate": 0.9,
               "time_avg": 1.338679313659668,
               "num_nodes_avg": 1854.1,
               "path_length_avg": 123.74216926340786,
               "success_improvement": 9.999999999999998,
               "time_improvement": 711.7616664134201,
               "length_improvement": -17.523444929583647,
               "objective_score": -205.0238109381093
          }
     ]
}
{
     "operator": "e1",
     "algorithm_description": "This algorithm is an Optimized Informed RRT* with Dynamic Sampling and Batch Rewiring. It integrates informed sampling within an ellipsoidal subset biased towards the currently best solution to focus exploration, dynamically adjusts step sizes and rewiring radius during planning, applies batch rewiring periodically to improve path optimality, and incorporates an efficient incremental collision checking strategy. This method enhances planning efficiency, convergence speed, path quality, robustness, and success rate, producing smooth and shorter paths in less computational time.",
     "planning_mechanism": "The planner starts by building a tree rooted at the start node, dynamically biases sampling towards an ellipsoidal informed subset if a path exists, adapts step and neighborhood radius over iterations, and uses batch rewiring every few iterations to locally optimize the tree. It employs incremental collision checking for edges and applies a final smoothing procedure after path extraction.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position        # Tuple[float, ...]\n        self.parent = parent            # Node or None\n        self.cost = cost                # Path cost from start\n        self.children = []             # List[Node]\n        self.valid = True              # For collision checking etc.\n\n    def distance(self, other: 'Node') -> float:\n        import math\n        return math.dist(self.position, other.position)\nclass Planner:\n    def __init__(self, max_iter: int = 5000, max_batch_rewire_iter: int = 100, \n                 base_step_size: float = 1.0, base_radius: float = 5.0, goal_sample_rate: float = 0.10):\n        self.max_iter = max_iter\n        self.max_batch_rewire_iter = max_batch_rewire_iter  # Interval to perform batch rewiring\n        self.base_step_size = base_step_size\n        self.base_radius = base_radius\n        self.goal_sample_rate = goal_sample_rate\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        import random\n        import math\n        from collections import deque\n\n        bounds = map.size\n        start_position = map.start\n        goal_position = map.goal\n        obstacles = map.obstacles\n\n        is_3d = len(bounds) == 3\n        dim = 3 if is_3d else 2\n\n        root = Node(start_position)\n        nodes = [root]\n\n        # Informed sampling parameters (for ellipsoidal sampling once a path is found)\n        c_best = float('inf')\n        c_min = math.dist(start_position, goal_position)\n        x_center = tuple((s + g) / 2 for s, g in zip(start_position, goal_position))\n        def rotation_matrix():\n            # Calculate rotation to align x-axis with start->goal vector\n            dx = [g - s for s, g in zip(start_position, goal_position)]\n            length = math.dist(start_position, goal_position)\n            if length == 0:\n                return None\n            # Normalize direction vector\n            a1 = [d / length for d in dx]\n            # Build orthonormal basis using Gram-Schmidt\n            if dim == 2:\n                # In 2D, rotation matrix aligns x-axis to a1\n                return ((a1[0], -a1[1]),\n                        (a1[1], a1[0]))\n            else:\n                # For 3D, build rotation matrix [a1, a2, a3]\n                # a2, a3 are orthonormal vectors perpendicular to a1\n                import numpy as np\n                a1_vec = np.array(a1)\n                # Find a vector not parallel to a1 for orthonormal basis\n                v = np.array([1.0, 0.0, 0.0]) if abs(a1[0]) < 0.9 else np.array([0.0, 1.0, 0.0])\n                a2 = np.cross(a1_vec, v)\n                a2 = a2 / np.linalg.norm(a2)\n                a3 = np.cross(a1_vec, a2)\n                # Compose rotation matrix, columns are a1, a2, a3\n                return np.column_stack((a1_vec, a2, a3))\n        rotation = rotation_matrix()\n\n        def in_obstacle(pos):\n            for obs in obstacles:\n                if is_3d:\n                    x, y, z, w, h, d = obs\n                    px, py, pz = pos\n                    if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                        return True\n                else:\n                    x, y, w, h = obs\n                    px, py = pos\n                    if x <= px <= x + w and y <= py <= y + h:\n                        return True\n            return False\n\n        def collision_free_line(p1, p2, discretization=15):\n            \"\"\"Check collision along edge by discretization sampling.\"\"\"\n            for i in range(discretization + 1):\n                interp = tuple(p1[j] + (p2[j] - p1[j]) * i / discretization for j in range(dim))\n                if in_obstacle(interp):\n                    return False\n            return True\n\n        def steer(from_pos, to_pos, step_size):\n            vec = [t - f for f, t in zip(from_pos, to_pos)]\n            dist = math.dist(from_pos, to_pos)\n            if dist == 0:\n                return to_pos\n            if dist <= step_size:\n                return to_pos\n            scale = step_size / dist\n            return tuple(f + scale * v for f, v in zip(from_pos, vec))\n\n        def sample_in_ellipsoid():\n            # If no c_best found, fallback to uniform sample\n            if c_best == float('inf'):\n                return tuple(random.uniform(0, bounds[i]) for i in range(dim))\n            # Sample in unit n-ball:\n            # Use method from Informed RRT*\n            import numpy as np\n            while True:\n                u = np.random.normal(0, 1, dim)\n                norm_u = np.linalg.norm(u)\n                if norm_u > 1e-10:\n                    break\n            unit_ball = u / norm_u * random.random()**(1.0/dim)\n\n            # Define ellipsoid radii\n            r1 = c_best / 2.0\n            others = math.sqrt(c_best**2 - c_min**2) / 2.0\n            if dim == 2:\n                L = np.array([[r1, 0],\n                              [0, others]])\n                # Rotation matrix\n                C = np.array(rotation)\n                point = np.dot(C, np.dot(L, unit_ball)) + np.array(x_center)\n                # Clamp inside bounds\n                point_clamped = tuple(max(0.0, min(bounds[i], point[i])) for i in range(dim))\n                return point_clamped\n            else:\n                # 3D dilation matrix\n                L = np.diag([r1] + [others]*(dim - 1))\n                C = rotation\n                point = C @ (L @ unit_ball) + np.array(x_center)\n                point_clamped = tuple(max(0.0, min(bounds[i], point[i])) for i in range(dim))\n                return point_clamped\n\n        def near_nodes(new_pos, radius):\n            return [n for n in nodes if math.dist(n.position, new_pos) <= radius]\n\n        def extract_path(node):\n            path = []\n            while node:\n                path.append(node.position)\n                node = node.parent\n            return path[::-1]\n\n        def path_smooth(path, max_iter=75):\n            if len(path) < 3:\n                return path\n            for _ in range(max_iter):\n                if len(path) <= 2:\n                    break\n                i = random.randint(0, len(path) - 3)\n                j = random.randint(i + 2, len(path) - 1)\n                if collision_free_line(path[i], path[j]):\n                    del path[i + 1:j]\n            return path\n\n        def batch_rewire():\n            # Batch rewiring to optimize subtree locally\n            for node in nodes:\n                neighbors = [n for n in nodes if math.dist(n.position, node.position) <= curr_radius and n != node]\n                for neighbor in neighbors:\n                    if neighbor == node.parent:\n                        continue\n                    if neighbor.cost + math.dist(neighbor.position, node.position) < node.cost:\n                        if collision_free_line(neighbor.position, node.position):\n                            # Rewire node\n                            if node.parent:\n                                try:\n                                    node.parent.children.remove(node)\n                                except ValueError:\n                                    pass\n                            node.parent = neighbor\n                            node.cost = neighbor.cost + math.dist(neighbor.position, node.position)\n                            neighbor.children.append(node)\n\n        success = False\n        path = []\n\n        for itr in range(1, self.max_iter + 1):\n\n            # Dynamic adjustment of step size / radius (shrinks with iteration to refine paths)\n            curr_step = max(self.base_step_size * (1 - (itr / self.max_iter)**0.9 * 0.8), 0.2)\n            curr_radius = max(self.base_radius * (1 - (itr / self.max_iter)**0.8 * 0.85), 2.0)\n\n            # Sample\n            if random.random() < self.goal_sample_rate:\n                sample = goal_position\n            else:\n                sample = sample_in_ellipsoid()\n\n            # Nearest node\n            nearest = min(nodes, key=lambda n: math.dist(n.position, sample))\n\n            # Steer towards sample\n            new_pos = steer(nearest.position, sample, curr_step)\n            if in_obstacle(new_pos):\n                continue\n            if not collision_free_line(nearest.position, new_pos):\n                continue\n\n            # Create new node\n            new_node = Node(new_pos)\n\n            # Near neighbors for parent selection & rewiring\n            neighbors = near_nodes(new_pos, curr_radius)\n            neighbors.append(nearest)  # Ensure nearest is included for candidate parent\n\n            # Choose best parent minimizing cost\n            min_cost = float('inf')\n            best_parent = None\n            for n in neighbors:\n                if collision_free_line(n.position, new_pos):\n                    cost = n.cost + math.dist(n.position, new_pos)\n                    if cost < min_cost:\n                        min_cost = cost\n                        best_parent = n\n            if best_parent is None:\n                continue\n\n            new_node.parent = best_parent\n            new_node.cost = min_cost\n            best_parent.children.append(new_node)\n            nodes.append(new_node)\n\n            # Rewire neighbors if new_node offers better cost\n            for n in neighbors:\n                if n is best_parent:\n                    continue\n                if collision_free_line(new_node.position, n.position):\n                    new_cost = new_node.cost + math.dist(new_node.position, n.position)\n                    if new_cost < n.cost:\n                        if n.parent:\n                            try:\n                                n.parent.children.remove(n)\n                            except ValueError:\n                                pass\n                        n.parent = new_node\n                        n.cost = new_cost\n                        new_node.children.append(n)\n\n            # Check if goal can be connected from new_node\n            dist_to_goal = math.dist(new_node.position, goal_position)\n            if dist_to_goal <= curr_step and collision_free_line(new_node.position, goal_position):\n                goal_node = Node(goal_position, parent=new_node, cost=new_node.cost + dist_to_goal)\n                new_node.children.append(goal_node)\n                nodes.append(goal_node)\n                path = extract_path(goal_node)\n\n                # Update best cost and parameters for informed sampling\n                if goal_node.cost < c_best:\n                    c_best = goal_node.cost\n\n                success = True\n\n                # Optional: early stopping after first solution to allow smoothing & return\n                # Could be removed to continue improving paths\n                break\n\n            # Batch rewiring every max_batch_rewire_iter iterations to refine cost tree-wide\n            if itr % self.max_batch_rewire_iter == 0:\n                batch_rewire()\n\n        # If found path, smooth it\n        if success and path:\n            path = path_smooth(path)\n\n        edges = [(n.parent, n) for n in nodes if n.parent]\n\n        return PlannerResult(\n            success=success,\n            path=path,\n            nodes=nodes,\n            edges=edges\n        )",
     "objective": 32091.85079,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 0.8,
               "time_avg": 5.006611275672912,
               "num_nodes_avg": 1262.6,
               "path_length_avg": 155.0432985515159,
               "success_improvement": -19.999999999999996,
               "time_improvement": 87347.68442750952,
               "length_improvement": -6.35523457674811,
               "objective_score": -26213.034281337506
          },
          {
               "map_id": 1,
               "success_rate": 0.0,
               "time_avg": 9.87874894142151,
               "num_nodes_avg": 2080.5,
               "path_length_avg": NaN,
               "success_improvement": -100.0,
               "time_improvement": 7438.217563332016,
               "length_improvement": NaN,
               "objective_score": NaN
          },
          {
               "map_id": 2,
               "success_rate": 0.3,
               "time_avg": 32.36808338165283,
               "num_nodes_avg": 3193.2,
               "path_length_avg": 116.36929629025586,
               "success_improvement": -50.0,
               "time_improvement": 19527.68008468603,
               "length_improvement": -22.43760771998153,
               "objective_score": -5878.8165038618135
          }
     ]
}
{
     "operator": "e2",
     "algorithm_description": "A hybrid bidirectional RRT* planner combining informed sampling, adaptive parameter tuning, and goal biasing to balance global exploration and local refinement. It grows two trees simultaneously from start and goal, adaptively adjusts step size and neighbor radius, and incorporates sampling in an informed ellipsoid after a feasible path is found. The planner performs local rewiring in both trees to improve path quality iteratively. Upon connecting the trees, it extracts, merges, and applies repeated path smoothing for enhanced smoothness and length reduction, improving efficiency, success rate, and final path quality.",
     "planning_mechanism": "The planner alternates between extending start and goal trees with dynamic step size and radius that shrink over iterations; it samples points uniformly and with goal bias initially, switching to informed ellipse sampling once a path is found. It performs rewiring in both trees locally to optimize paths, and attempts to connect the trees frequently. Final path extraction and multi-iteration smoothing yield a smooth, short trajectory.",
     "code": "class Node:\n    def __init__(self, position, parent=None, cost=0.0):\n        self.position = position\n        self.parent = parent\n        self.cost = cost\n        self.children = []\n        self.valid = True\n\n    def distance(self, other_pos):\n        import math\n        return math.dist(self.position, other_pos)\nclass Planner:\n    def __init__(self, max_iter: int = 5000, base_step_size: float = 1.2, base_radius: float = 8.0, goal_sample_rate: float = 0.12):\n        self.max_iter = max_iter\n        self.base_step_size = base_step_size\n        self.base_radius = base_radius\n        self.goal_sample_rate = goal_sample_rate\n\n    def plan(self, map: 'Map') -> 'PlannerResult':\n        import math\n        import random\n\n        bounds = map.size\n        start_pos = map.start\n        goal_pos = map.goal\n        obstacles = map.obstacles\n        is_3d = len(bounds) == 3\n        dim = len(bounds)\n\n        tree_start = [Node(start_pos)]\n        tree_goal = [Node(goal_pos)]\n\n        best_cost = float('inf')\n        best_meeting_nodes = None\n\n        def in_obstacle(pos):\n            if is_3d:\n                px, py, pz = pos\n                for obs in obstacles:\n                    x, y, z, w, h, d = obs\n                    if x <= px <= x + w and y <= py <= y + h and z <= pz <= z + d:\n                        return True\n            else:\n                px, py = pos\n                for obs in obstacles:\n                    x, y, w, h = obs\n                    if x <= px <= x + w and y <= py <= y + h:\n                        return True\n            return False\n\n        def collision_free_line(p1, p2, resolution=0.4):\n            dist = math.dist(p1, p2)\n            steps = max(1, int(dist / resolution))\n            for i in range(steps + 1):\n                interp = tuple(p1[j] + (p2[j] - p1[j]) * i / steps for j in range(dim))\n                if in_obstacle(interp):\n                    return False\n            return True\n\n        def steer(from_pos, to_pos, step_size):\n            dist = math.dist(from_pos, to_pos)\n            if dist == 0:\n                return to_pos\n            if dist <= step_size:\n                return to_pos\n            scale = step_size / dist\n            return tuple(f + scale * (t - f) for f, t in zip(from_pos, to_pos))\n\n        def sample_uniform(bounds):\n            return tuple(random.uniform(0, b) for b in bounds)\n\n        def sample_in_ellipse(start, goal, c_best, bounds):\n            c_min = math.dist(start, goal)\n            if c_min == 0 or c_best == float('inf'):\n                return sample_uniform(bounds)\n\n            center = tuple((s + g) / 2 for s, g in zip(start, goal))\n            dir_vec = tuple((g - s) / c_min for s, g in zip(start, goal))\n            a = c_best / 2\n            b_val = math.sqrt(max(a ** 2 - (c_min / 2) ** 2, 0))\n\n            # Sampling in unit circle (2D)\n            while True:\n                x = random.uniform(-1, 1)\n                y = random.uniform(-1, 1)\n                if x * x + y * y <= 1:\n                    break\n\n            # Rotation matrix 2D\n            cos_theta = dir_vec[0]\n            sin_theta = dir_vec[1]\n            sample_local = (a * x, b_val * y)\n            sample = (\n                center[0] + sample_local[0] * cos_theta - sample_local[1] * sin_theta,\n                center[1] + sample_local[0] * sin_theta + sample_local[1] * cos_theta,\n            )\n            # Clip to bounds\n            sample = tuple(max(0, min(s, b)) for s, b in zip(sample, bounds))\n            if dim == 3:\n                # Sample z uniformly if 3D (no ellipse shaping in z)\n                sample = sample + (random.uniform(0, bounds[2]),)\n            return sample\n\n        def nearest_node(tree, point):\n            return min(tree, key=lambda n: math.dist(n.position, point))\n\n        def find_near(tree, new_node, radius):\n            r_sq = radius * radius\n            return [n for n in tree if self._dist_sq(n.position, new_node.position) <= r_sq]\n\n        def try_connect(new_node, tree_other, step_size):\n            # Look for connection node in other tree within step_size and collision free line\n            radius_connect = step_size * 1.5  # Slightly larger connect threshold\n            candidates = [n for n in tree_other if math.dist(n.position, new_node.position) <= radius_connect]\n            candidates.sort(key=lambda n: math.dist(n.position, new_node.position))\n            for n in candidates:\n                if collision_free_line(new_node.position, n.position):\n                    return n\n            return None\n\n        def extract_path(node):\n            path = []\n            while node:\n                path.append(node.position)\n                node = node.parent\n            return path[::-1]\n\n        def smooth_path(path, max_iter=100):\n            if len(path) < 3:\n                return path\n            for _ in range(max_iter):\n                if len(path) <= 2:\n                    break\n                i = random.randint(0, len(path) - 3)\n                j = random.randint(i + 2, len(path) - 1)\n                if collision_free_line(path[i], path[j]):\n                    del path[i + 1:j]\n            return path\n\n        # Utility distance squared for efficiency\n        self._dist_sq = lambda p1, p2: sum((a - b) ** 2 for a, b in zip(p1, p2))\n\n        # Main planning loop\n        for iter_num in range(1, self.max_iter + 1):\n\n            # Dynamically adapt step size and neighbor radius (shrink over iterations)\n            step_size = max(self.base_step_size * (1 - iter_num / self.max_iter * 0.75), 0.3)\n            neighbor_radius = max(self.base_radius * (1 - iter_num / self.max_iter * 0.85), 3.0)\n\n            # Sample with goal bias or informed sampling if solution found\n            if best_cost < float('inf'):\n                sample = sample_in_ellipse(start_pos, goal_pos, best_cost, bounds)\n            else:\n                if random.random() < self.goal_sample_rate:\n                    sample = goal_pos\n                else:\n                    sample = sample_uniform(bounds)\n\n            # Alternate tree expansion (start first if even, goal first if odd iteration)\n            if iter_num % 2 == 0:\n                order = [(tree_start, tree_goal), (tree_goal, tree_start)]\n            else:\n                order = [(tree_goal, tree_start), (tree_start, tree_goal)]\n\n            connection_made = False\n            for tree_a, tree_b in order:\n\n                nearest = nearest_node(tree_a, sample)\n                new_pos = steer(nearest.position, sample, step_size)\n\n                if in_obstacle(new_pos):\n                    continue\n                if not collision_free_line(nearest.position, new_pos):\n                    continue\n\n                new_cost = nearest.cost + math.dist(nearest.position, new_pos)\n                new_node = Node(new_pos, parent=nearest, cost=new_cost)\n                nearest.children.append(new_node)\n                tree_a.append(new_node)\n\n                # Local rewiring in tree_a\n                near_nodes = find_near(tree_a, new_node, neighbor_radius)\n                # Try to improve new_node parent using neighbors\n                min_cost = new_node.cost\n                min_parent = nearest\n                for near in near_nodes:\n                    if near is nearest:\n                        continue\n                    if collision_free_line(near.position, new_node.position):\n                        cost_through_near = near.cost + math.dist(near.position, new_node.position)\n                        if cost_through_near < min_cost:\n                            min_cost = cost_through_near\n                            min_parent = near\n                if min_parent != nearest:\n                    nearest.children.remove(new_node)\n                    new_node.parent = min_parent\n                    new_node.cost = min_cost\n                    min_parent.children.append(new_node)\n\n                # Rewire near nodes to new_node if better\n                for near in near_nodes:\n                    if near is min_parent:\n                        continue\n                    if collision_free_line(new_node.position, near.position):\n                        cost_via_new = new_node.cost + math.dist(new_node.position, near.position)\n                        if cost_via_new < near.cost:\n                            if near.parent:\n                                near.parent.children.remove(near)\n                            near.parent = new_node\n                            near.cost = cost_via_new\n                            new_node.children.append(near)\n\n                # Attempt to connect the other tree\n                connect_node = try_connect(new_node, tree_b, step_size)\n                if connect_node:\n                    total_cost = new_node.cost + connect_node.cost + math.dist(new_node.position, connect_node.position)\n                    if total_cost < best_cost:\n                        best_cost = total_cost\n                        best_meeting_nodes = (new_node, connect_node)\n                    connection_made = True\n                    break\n\n            if connection_made:\n                # Continue searching for better paths\n                if iter_num > self.max_iter * 0.6:\n                    # After 60% iterations, early stop on good path\n                    break\n\n        nodes_all = tree_start + tree_goal\n        edges = [(n.parent, n) for n in nodes_all if n.parent]\n\n        if best_meeting_nodes is None:\n            # No path found\n            return PlannerResult(False, [], nodes_all, edges)\n\n        # Extract and merge paths\n        path_start = extract_path(best_meeting_nodes[0])\n        path_goal = extract_path(best_meeting_nodes[1])[::-1]\n        full_path = path_start + path_goal[1:]\n\n        # Multiple passes of smoothing for improved path quality\n        smoothed_path = full_path\n        for _ in range(3):\n            smoothed_path = smooth_path(smoothed_path, max_iter=75)\n\n        return PlannerResult(True, smoothed_path, nodes_all, edges)",
     "objective": 51198.02174,
     "other_inf": [
          {
               "map_id": 0,
               "success_rate": 1.0,
               "time_avg": 9.168197226524352,
               "num_nodes_avg": 3152.6,
               "path_length_avg": 146.3133130965152,
               "success_improvement": 0.0,
               "time_improvement": 160035.78320528037,
               "length_improvement": -11.628067699621248,
               "objective_score": -48008.40934804418
          },
          {
               "map_id": 1,
               "success_rate": 1.0,
               "time_avg": 5.606859040260315,
               "num_nodes_avg": 2846.7,
               "path_length_avg": 228.06596985792197,
               "success_improvement": 0.0,
               "time_improvement": 4178.4489759829185,
               "length_improvement": -24.888978349740672,
               "objective_score": -1248.5568971249274
          },
          {
               "map_id": 2,
               "success_rate": 0.7,
               "time_avg": 10.83241002559662,
               "num_nodes_avg": 3903.4,
               "path_length_avg": 115.94683129832408,
               "success_improvement": -10.000000000000009,
               "time_improvement": 6468.6644470606025,
               "length_improvement": -22.719188828344137,
               "objective_score": -1941.055496352512
          }
     ]
}
